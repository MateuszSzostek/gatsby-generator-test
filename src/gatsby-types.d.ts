/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContentfulAsset = ContentfulReference & Node & RemoteFile & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly file: Maybe<ContentfulAssetFile>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mimeType: Scalars['String'];
  readonly node_locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly placeholderUrl: Maybe<Scalars['String']>;
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly size: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAssetSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type ContentfulAsset_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAsset_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  cropFocus: InputMaybe<ContentfulImageCropFocus>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  quality: InputMaybe<Scalars['Int']>;
  resizingBehavior: InputMaybe<ImageResizingBehavior>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetConnection_distinctArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetConnection_groupArgs = {
  field: ContentfulAssetFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetConnection_maxArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetConnection_minArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetConnection_sumArgs = {
  field: ContentfulAssetFieldsEnum;
};

type ContentfulAssetEdge = {
  readonly next: Maybe<ContentfulAsset>;
  readonly node: ContentfulAsset;
  readonly previous: Maybe<ContentfulAsset>;
};

type ContentfulAssetFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'createdAt'
  | 'description'
  | 'file.contentType'
  | 'file.details.image.height'
  | 'file.details.image.width'
  | 'file.details.size'
  | 'file.fileName'
  | 'file.url'
  | 'filename'
  | 'filesize'
  | 'gatsbyImage'
  | 'gatsbyImageData'
  | 'height'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mimeType'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'placeholderUrl'
  | 'publicUrl'
  | 'resize.height'
  | 'resize.src'
  | 'resize.width'
  | 'size'
  | 'spaceId'
  | 'sys.revision'
  | 'sys.type'
  | 'title'
  | 'updatedAt'
  | 'url'
  | 'width';

type ContentfulAssetFile = {
  readonly contentType: Maybe<Scalars['String']>;
  readonly details: Maybe<ContentfulAssetFileDetails>;
  readonly fileName: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type ContentfulAssetFileDetails = {
  readonly image: Maybe<ContentfulAssetFileDetailsImage>;
  readonly size: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsFilterInput = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileDetailsImage = {
  readonly height: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsImageFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileFilterInput = {
  readonly contentType: InputMaybe<StringQueryOperatorInput>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulAssetFilterInput>;
};

type ContentfulAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetGroupConnection_distinctArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetGroupConnection_groupArgs = {
  field: ContentfulAssetFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetGroupConnection_maxArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetGroupConnection_minArgs = {
  field: ContentfulAssetFieldsEnum;
};


type ContentfulAssetGroupConnection_sumArgs = {
  field: ContentfulAssetFieldsEnum;
};

type ContentfulAssetSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulAssetSys = {
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAssetSysFilterInput = {
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlogPost = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulBlogPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogPostEdge>;
  readonly group: ReadonlyArray<ContentfulBlogPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlogPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogPostConnection_distinctArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostConnection_groupArgs = {
  field: ContentfulBlogPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogPostConnection_maxArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostConnection_minArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostConnection_sumArgs = {
  field: ContentfulBlogPostFieldsEnum;
};

type ContentfulBlogPostEdge = {
  readonly next: Maybe<ContentfulBlogPost>;
  readonly node: ContentfulBlogPost;
  readonly previous: Maybe<ContentfulBlogPost>;
};

type ContentfulBlogPostFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulBlogPostFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulBlogPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlogPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlogPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogPostGroupConnection_distinctArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostGroupConnection_groupArgs = {
  field: ContentfulBlogPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogPostGroupConnection_maxArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostGroupConnection_minArgs = {
  field: ContentfulBlogPostFieldsEnum;
};


type ContentfulBlogPostGroupConnection_sumArgs = {
  field: ContentfulBlogPostFieldsEnum;
};

type ContentfulBlogPostSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlogPostFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulCategory = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulCategoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCategoryEdge>;
  readonly group: ReadonlyArray<ContentfulCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCategoryConnection_distinctArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryConnection_groupArgs = {
  field: ContentfulCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCategoryConnection_maxArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryConnection_minArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryConnection_sumArgs = {
  field: ContentfulCategoryFieldsEnum;
};

type ContentfulCategoryEdge = {
  readonly next: Maybe<ContentfulCategory>;
  readonly node: ContentfulCategory;
  readonly previous: Maybe<ContentfulCategory>;
};

type ContentfulCategoryFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulCategoryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulCategoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCategoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulCategoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCategory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCategoryGroupConnection_distinctArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryGroupConnection_groupArgs = {
  field: ContentfulCategoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCategoryGroupConnection_maxArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryGroupConnection_minArgs = {
  field: ContentfulCategoryFieldsEnum;
};


type ContentfulCategoryGroupConnection_sumArgs = {
  field: ContentfulCategoryFieldsEnum;
};

type ContentfulCategorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCategoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulCertyfikat = ContentfulEntry & ContentfulReference & Node & {
  readonly certyfikat: Maybe<ContentfulAsset>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly event: Maybe<ReadonlyArray<Maybe<ContentfulEvent>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly nazwaCertyfikatu: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulCertyfikatSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly zdjecieCertyfikatu: Maybe<ContentfulAsset>;
};


type ContentfulCertyfikat_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulCertyfikat_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulCertyfikatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCertyfikatEdge>;
  readonly group: ReadonlyArray<ContentfulCertyfikatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCertyfikat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCertyfikatConnection_distinctArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatConnection_groupArgs = {
  field: ContentfulCertyfikatFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCertyfikatConnection_maxArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatConnection_minArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatConnection_sumArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};

type ContentfulCertyfikatEdge = {
  readonly next: Maybe<ContentfulCertyfikat>;
  readonly node: ContentfulCertyfikat;
  readonly previous: Maybe<ContentfulCertyfikat>;
};

type ContentfulCertyfikatFieldsEnum =
  | 'certyfikat.children'
  | 'certyfikat.children.children'
  | 'certyfikat.children.children.children'
  | 'certyfikat.children.children.id'
  | 'certyfikat.children.id'
  | 'certyfikat.children.internal.content'
  | 'certyfikat.children.internal.contentDigest'
  | 'certyfikat.children.internal.contentFilePath'
  | 'certyfikat.children.internal.description'
  | 'certyfikat.children.internal.fieldOwners'
  | 'certyfikat.children.internal.ignoreType'
  | 'certyfikat.children.internal.mediaType'
  | 'certyfikat.children.internal.owner'
  | 'certyfikat.children.internal.type'
  | 'certyfikat.children.parent.children'
  | 'certyfikat.children.parent.id'
  | 'certyfikat.contentful_id'
  | 'certyfikat.createdAt'
  | 'certyfikat.description'
  | 'certyfikat.file.contentType'
  | 'certyfikat.file.details.size'
  | 'certyfikat.file.fileName'
  | 'certyfikat.file.url'
  | 'certyfikat.filename'
  | 'certyfikat.filesize'
  | 'certyfikat.gatsbyImage'
  | 'certyfikat.gatsbyImageData'
  | 'certyfikat.height'
  | 'certyfikat.id'
  | 'certyfikat.internal.content'
  | 'certyfikat.internal.contentDigest'
  | 'certyfikat.internal.contentFilePath'
  | 'certyfikat.internal.description'
  | 'certyfikat.internal.fieldOwners'
  | 'certyfikat.internal.ignoreType'
  | 'certyfikat.internal.mediaType'
  | 'certyfikat.internal.owner'
  | 'certyfikat.internal.type'
  | 'certyfikat.mimeType'
  | 'certyfikat.node_locale'
  | 'certyfikat.parent.children'
  | 'certyfikat.parent.children.children'
  | 'certyfikat.parent.children.id'
  | 'certyfikat.parent.id'
  | 'certyfikat.parent.internal.content'
  | 'certyfikat.parent.internal.contentDigest'
  | 'certyfikat.parent.internal.contentFilePath'
  | 'certyfikat.parent.internal.description'
  | 'certyfikat.parent.internal.fieldOwners'
  | 'certyfikat.parent.internal.ignoreType'
  | 'certyfikat.parent.internal.mediaType'
  | 'certyfikat.parent.internal.owner'
  | 'certyfikat.parent.internal.type'
  | 'certyfikat.parent.parent.children'
  | 'certyfikat.parent.parent.id'
  | 'certyfikat.placeholderUrl'
  | 'certyfikat.publicUrl'
  | 'certyfikat.resize.height'
  | 'certyfikat.resize.src'
  | 'certyfikat.resize.width'
  | 'certyfikat.size'
  | 'certyfikat.spaceId'
  | 'certyfikat.sys.revision'
  | 'certyfikat.sys.type'
  | 'certyfikat.title'
  | 'certyfikat.updatedAt'
  | 'certyfikat.url'
  | 'certyfikat.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'createdAt'
  | 'event'
  | 'event.certyfikaty'
  | 'event.certyfikaty.certyfikat.children'
  | 'event.certyfikaty.certyfikat.contentful_id'
  | 'event.certyfikaty.certyfikat.createdAt'
  | 'event.certyfikaty.certyfikat.description'
  | 'event.certyfikaty.certyfikat.filename'
  | 'event.certyfikaty.certyfikat.filesize'
  | 'event.certyfikaty.certyfikat.gatsbyImage'
  | 'event.certyfikaty.certyfikat.gatsbyImageData'
  | 'event.certyfikaty.certyfikat.height'
  | 'event.certyfikaty.certyfikat.id'
  | 'event.certyfikaty.certyfikat.mimeType'
  | 'event.certyfikaty.certyfikat.node_locale'
  | 'event.certyfikaty.certyfikat.placeholderUrl'
  | 'event.certyfikaty.certyfikat.publicUrl'
  | 'event.certyfikaty.certyfikat.size'
  | 'event.certyfikaty.certyfikat.spaceId'
  | 'event.certyfikaty.certyfikat.title'
  | 'event.certyfikaty.certyfikat.updatedAt'
  | 'event.certyfikaty.certyfikat.url'
  | 'event.certyfikaty.certyfikat.width'
  | 'event.certyfikaty.children'
  | 'event.certyfikaty.children.children'
  | 'event.certyfikaty.children.id'
  | 'event.certyfikaty.contentful_id'
  | 'event.certyfikaty.createdAt'
  | 'event.certyfikaty.event'
  | 'event.certyfikaty.event.certyfikaty'
  | 'event.certyfikaty.event.children'
  | 'event.certyfikaty.event.contentful_id'
  | 'event.certyfikaty.event.createdAt'
  | 'event.certyfikaty.event.eventDate'
  | 'event.certyfikaty.event.id'
  | 'event.certyfikaty.event.kolorTla'
  | 'event.certyfikaty.event.node_locale'
  | 'event.certyfikaty.event.patroniHonorowi'
  | 'event.certyfikaty.event.patroniMedialni'
  | 'event.certyfikaty.event.spaceId'
  | 'event.certyfikaty.event.tytul'
  | 'event.certyfikaty.event.updatedAt'
  | 'event.certyfikaty.id'
  | 'event.certyfikaty.internal.content'
  | 'event.certyfikaty.internal.contentDigest'
  | 'event.certyfikaty.internal.contentFilePath'
  | 'event.certyfikaty.internal.description'
  | 'event.certyfikaty.internal.fieldOwners'
  | 'event.certyfikaty.internal.ignoreType'
  | 'event.certyfikaty.internal.mediaType'
  | 'event.certyfikaty.internal.owner'
  | 'event.certyfikaty.internal.type'
  | 'event.certyfikaty.nazwaCertyfikatu'
  | 'event.certyfikaty.node_locale'
  | 'event.certyfikaty.parent.children'
  | 'event.certyfikaty.parent.id'
  | 'event.certyfikaty.spaceId'
  | 'event.certyfikaty.sys.revision'
  | 'event.certyfikaty.sys.type'
  | 'event.certyfikaty.updatedAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.children'
  | 'event.certyfikaty.zdjecieCertyfikatu.contentful_id'
  | 'event.certyfikaty.zdjecieCertyfikatu.createdAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.description'
  | 'event.certyfikaty.zdjecieCertyfikatu.filename'
  | 'event.certyfikaty.zdjecieCertyfikatu.filesize'
  | 'event.certyfikaty.zdjecieCertyfikatu.gatsbyImage'
  | 'event.certyfikaty.zdjecieCertyfikatu.gatsbyImageData'
  | 'event.certyfikaty.zdjecieCertyfikatu.height'
  | 'event.certyfikaty.zdjecieCertyfikatu.id'
  | 'event.certyfikaty.zdjecieCertyfikatu.mimeType'
  | 'event.certyfikaty.zdjecieCertyfikatu.node_locale'
  | 'event.certyfikaty.zdjecieCertyfikatu.placeholderUrl'
  | 'event.certyfikaty.zdjecieCertyfikatu.publicUrl'
  | 'event.certyfikaty.zdjecieCertyfikatu.size'
  | 'event.certyfikaty.zdjecieCertyfikatu.spaceId'
  | 'event.certyfikaty.zdjecieCertyfikatu.title'
  | 'event.certyfikaty.zdjecieCertyfikatu.updatedAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.url'
  | 'event.certyfikaty.zdjecieCertyfikatu.width'
  | 'event.children'
  | 'event.children.children'
  | 'event.children.children.children'
  | 'event.children.children.id'
  | 'event.children.id'
  | 'event.children.internal.content'
  | 'event.children.internal.contentDigest'
  | 'event.children.internal.contentFilePath'
  | 'event.children.internal.description'
  | 'event.children.internal.fieldOwners'
  | 'event.children.internal.ignoreType'
  | 'event.children.internal.mediaType'
  | 'event.children.internal.owner'
  | 'event.children.internal.type'
  | 'event.children.parent.children'
  | 'event.children.parent.id'
  | 'event.contentful_id'
  | 'event.createdAt'
  | 'event.eventDate'
  | 'event.id'
  | 'event.informacja.raw'
  | 'event.internal.content'
  | 'event.internal.contentDigest'
  | 'event.internal.contentFilePath'
  | 'event.internal.description'
  | 'event.internal.fieldOwners'
  | 'event.internal.ignoreType'
  | 'event.internal.mediaType'
  | 'event.internal.owner'
  | 'event.internal.type'
  | 'event.kolorTla'
  | 'event.node_locale'
  | 'event.parent.children'
  | 'event.parent.children.children'
  | 'event.parent.children.id'
  | 'event.parent.id'
  | 'event.parent.internal.content'
  | 'event.parent.internal.contentDigest'
  | 'event.parent.internal.contentFilePath'
  | 'event.parent.internal.description'
  | 'event.parent.internal.fieldOwners'
  | 'event.parent.internal.ignoreType'
  | 'event.parent.internal.mediaType'
  | 'event.parent.internal.owner'
  | 'event.parent.internal.type'
  | 'event.parent.parent.children'
  | 'event.parent.parent.id'
  | 'event.patroniHonorowi'
  | 'event.patroniHonorowi.children'
  | 'event.patroniHonorowi.children.children'
  | 'event.patroniHonorowi.children.id'
  | 'event.patroniHonorowi.contentful_id'
  | 'event.patroniHonorowi.createdAt'
  | 'event.patroniHonorowi.event'
  | 'event.patroniHonorowi.event.certyfikaty'
  | 'event.patroniHonorowi.event.children'
  | 'event.patroniHonorowi.event.contentful_id'
  | 'event.patroniHonorowi.event.createdAt'
  | 'event.patroniHonorowi.event.eventDate'
  | 'event.patroniHonorowi.event.id'
  | 'event.patroniHonorowi.event.kolorTla'
  | 'event.patroniHonorowi.event.node_locale'
  | 'event.patroniHonorowi.event.patroniHonorowi'
  | 'event.patroniHonorowi.event.patroniMedialni'
  | 'event.patroniHonorowi.event.spaceId'
  | 'event.patroniHonorowi.event.tytul'
  | 'event.patroniHonorowi.event.updatedAt'
  | 'event.patroniHonorowi.id'
  | 'event.patroniHonorowi.internal.content'
  | 'event.patroniHonorowi.internal.contentDigest'
  | 'event.patroniHonorowi.internal.contentFilePath'
  | 'event.patroniHonorowi.internal.description'
  | 'event.patroniHonorowi.internal.fieldOwners'
  | 'event.patroniHonorowi.internal.ignoreType'
  | 'event.patroniHonorowi.internal.mediaType'
  | 'event.patroniHonorowi.internal.owner'
  | 'event.patroniHonorowi.internal.type'
  | 'event.patroniHonorowi.linkDoPatrona'
  | 'event.patroniHonorowi.nazwaPatrona'
  | 'event.patroniHonorowi.node_locale'
  | 'event.patroniHonorowi.parent.children'
  | 'event.patroniHonorowi.parent.id'
  | 'event.patroniHonorowi.spaceId'
  | 'event.patroniHonorowi.sys.revision'
  | 'event.patroniHonorowi.sys.type'
  | 'event.patroniHonorowi.updatedAt'
  | 'event.patroniHonorowi.zdjeciePatrona.children'
  | 'event.patroniHonorowi.zdjeciePatrona.contentful_id'
  | 'event.patroniHonorowi.zdjeciePatrona.createdAt'
  | 'event.patroniHonorowi.zdjeciePatrona.description'
  | 'event.patroniHonorowi.zdjeciePatrona.filename'
  | 'event.patroniHonorowi.zdjeciePatrona.filesize'
  | 'event.patroniHonorowi.zdjeciePatrona.gatsbyImage'
  | 'event.patroniHonorowi.zdjeciePatrona.gatsbyImageData'
  | 'event.patroniHonorowi.zdjeciePatrona.height'
  | 'event.patroniHonorowi.zdjeciePatrona.id'
  | 'event.patroniHonorowi.zdjeciePatrona.mimeType'
  | 'event.patroniHonorowi.zdjeciePatrona.node_locale'
  | 'event.patroniHonorowi.zdjeciePatrona.placeholderUrl'
  | 'event.patroniHonorowi.zdjeciePatrona.publicUrl'
  | 'event.patroniHonorowi.zdjeciePatrona.size'
  | 'event.patroniHonorowi.zdjeciePatrona.spaceId'
  | 'event.patroniHonorowi.zdjeciePatrona.title'
  | 'event.patroniHonorowi.zdjeciePatrona.updatedAt'
  | 'event.patroniHonorowi.zdjeciePatrona.url'
  | 'event.patroniHonorowi.zdjeciePatrona.width'
  | 'event.patroniMedialni'
  | 'event.patroniMedialni.children'
  | 'event.patroniMedialni.children.children'
  | 'event.patroniMedialni.children.id'
  | 'event.patroniMedialni.contentful_id'
  | 'event.patroniMedialni.createdAt'
  | 'event.patroniMedialni.event'
  | 'event.patroniMedialni.event.certyfikaty'
  | 'event.patroniMedialni.event.children'
  | 'event.patroniMedialni.event.contentful_id'
  | 'event.patroniMedialni.event.createdAt'
  | 'event.patroniMedialni.event.eventDate'
  | 'event.patroniMedialni.event.id'
  | 'event.patroniMedialni.event.kolorTla'
  | 'event.patroniMedialni.event.node_locale'
  | 'event.patroniMedialni.event.patroniHonorowi'
  | 'event.patroniMedialni.event.patroniMedialni'
  | 'event.patroniMedialni.event.spaceId'
  | 'event.patroniMedialni.event.tytul'
  | 'event.patroniMedialni.event.updatedAt'
  | 'event.patroniMedialni.id'
  | 'event.patroniMedialni.internal.content'
  | 'event.patroniMedialni.internal.contentDigest'
  | 'event.patroniMedialni.internal.contentFilePath'
  | 'event.patroniMedialni.internal.description'
  | 'event.patroniMedialni.internal.fieldOwners'
  | 'event.patroniMedialni.internal.ignoreType'
  | 'event.patroniMedialni.internal.mediaType'
  | 'event.patroniMedialni.internal.owner'
  | 'event.patroniMedialni.internal.type'
  | 'event.patroniMedialni.linkDoPatrona'
  | 'event.patroniMedialni.nazwaPatrona'
  | 'event.patroniMedialni.node_locale'
  | 'event.patroniMedialni.parent.children'
  | 'event.patroniMedialni.parent.id'
  | 'event.patroniMedialni.spaceId'
  | 'event.patroniMedialni.sys.revision'
  | 'event.patroniMedialni.sys.type'
  | 'event.patroniMedialni.updatedAt'
  | 'event.patroniMedialni.zdjeciePatrona.children'
  | 'event.patroniMedialni.zdjeciePatrona.contentful_id'
  | 'event.patroniMedialni.zdjeciePatrona.createdAt'
  | 'event.patroniMedialni.zdjeciePatrona.description'
  | 'event.patroniMedialni.zdjeciePatrona.filename'
  | 'event.patroniMedialni.zdjeciePatrona.filesize'
  | 'event.patroniMedialni.zdjeciePatrona.gatsbyImage'
  | 'event.patroniMedialni.zdjeciePatrona.gatsbyImageData'
  | 'event.patroniMedialni.zdjeciePatrona.height'
  | 'event.patroniMedialni.zdjeciePatrona.id'
  | 'event.patroniMedialni.zdjeciePatrona.mimeType'
  | 'event.patroniMedialni.zdjeciePatrona.node_locale'
  | 'event.patroniMedialni.zdjeciePatrona.placeholderUrl'
  | 'event.patroniMedialni.zdjeciePatrona.publicUrl'
  | 'event.patroniMedialni.zdjeciePatrona.size'
  | 'event.patroniMedialni.zdjeciePatrona.spaceId'
  | 'event.patroniMedialni.zdjeciePatrona.title'
  | 'event.patroniMedialni.zdjeciePatrona.updatedAt'
  | 'event.patroniMedialni.zdjeciePatrona.url'
  | 'event.patroniMedialni.zdjeciePatrona.width'
  | 'event.placeOfEvent.lat'
  | 'event.placeOfEvent.lon'
  | 'event.spaceId'
  | 'event.sys.revision'
  | 'event.sys.type'
  | 'event.tloPowitalne.children'
  | 'event.tloPowitalne.children.children'
  | 'event.tloPowitalne.children.id'
  | 'event.tloPowitalne.contentful_id'
  | 'event.tloPowitalne.createdAt'
  | 'event.tloPowitalne.description'
  | 'event.tloPowitalne.file.contentType'
  | 'event.tloPowitalne.file.fileName'
  | 'event.tloPowitalne.file.url'
  | 'event.tloPowitalne.filename'
  | 'event.tloPowitalne.filesize'
  | 'event.tloPowitalne.gatsbyImage'
  | 'event.tloPowitalne.gatsbyImageData'
  | 'event.tloPowitalne.height'
  | 'event.tloPowitalne.id'
  | 'event.tloPowitalne.internal.content'
  | 'event.tloPowitalne.internal.contentDigest'
  | 'event.tloPowitalne.internal.contentFilePath'
  | 'event.tloPowitalne.internal.description'
  | 'event.tloPowitalne.internal.fieldOwners'
  | 'event.tloPowitalne.internal.ignoreType'
  | 'event.tloPowitalne.internal.mediaType'
  | 'event.tloPowitalne.internal.owner'
  | 'event.tloPowitalne.internal.type'
  | 'event.tloPowitalne.mimeType'
  | 'event.tloPowitalne.node_locale'
  | 'event.tloPowitalne.parent.children'
  | 'event.tloPowitalne.parent.id'
  | 'event.tloPowitalne.placeholderUrl'
  | 'event.tloPowitalne.publicUrl'
  | 'event.tloPowitalne.resize.height'
  | 'event.tloPowitalne.resize.src'
  | 'event.tloPowitalne.resize.width'
  | 'event.tloPowitalne.size'
  | 'event.tloPowitalne.spaceId'
  | 'event.tloPowitalne.sys.revision'
  | 'event.tloPowitalne.sys.type'
  | 'event.tloPowitalne.title'
  | 'event.tloPowitalne.updatedAt'
  | 'event.tloPowitalne.url'
  | 'event.tloPowitalne.width'
  | 'event.tytul'
  | 'event.updatedAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'nazwaCertyfikatu'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'spaceId'
  | 'sys.contentType.sys.id'
  | 'sys.contentType.sys.linkType'
  | 'sys.contentType.sys.type'
  | 'sys.revision'
  | 'sys.type'
  | 'updatedAt'
  | 'zdjecieCertyfikatu.children'
  | 'zdjecieCertyfikatu.children.children'
  | 'zdjecieCertyfikatu.children.children.children'
  | 'zdjecieCertyfikatu.children.children.id'
  | 'zdjecieCertyfikatu.children.id'
  | 'zdjecieCertyfikatu.children.internal.content'
  | 'zdjecieCertyfikatu.children.internal.contentDigest'
  | 'zdjecieCertyfikatu.children.internal.contentFilePath'
  | 'zdjecieCertyfikatu.children.internal.description'
  | 'zdjecieCertyfikatu.children.internal.fieldOwners'
  | 'zdjecieCertyfikatu.children.internal.ignoreType'
  | 'zdjecieCertyfikatu.children.internal.mediaType'
  | 'zdjecieCertyfikatu.children.internal.owner'
  | 'zdjecieCertyfikatu.children.internal.type'
  | 'zdjecieCertyfikatu.children.parent.children'
  | 'zdjecieCertyfikatu.children.parent.id'
  | 'zdjecieCertyfikatu.contentful_id'
  | 'zdjecieCertyfikatu.createdAt'
  | 'zdjecieCertyfikatu.description'
  | 'zdjecieCertyfikatu.file.contentType'
  | 'zdjecieCertyfikatu.file.details.size'
  | 'zdjecieCertyfikatu.file.fileName'
  | 'zdjecieCertyfikatu.file.url'
  | 'zdjecieCertyfikatu.filename'
  | 'zdjecieCertyfikatu.filesize'
  | 'zdjecieCertyfikatu.gatsbyImage'
  | 'zdjecieCertyfikatu.gatsbyImageData'
  | 'zdjecieCertyfikatu.height'
  | 'zdjecieCertyfikatu.id'
  | 'zdjecieCertyfikatu.internal.content'
  | 'zdjecieCertyfikatu.internal.contentDigest'
  | 'zdjecieCertyfikatu.internal.contentFilePath'
  | 'zdjecieCertyfikatu.internal.description'
  | 'zdjecieCertyfikatu.internal.fieldOwners'
  | 'zdjecieCertyfikatu.internal.ignoreType'
  | 'zdjecieCertyfikatu.internal.mediaType'
  | 'zdjecieCertyfikatu.internal.owner'
  | 'zdjecieCertyfikatu.internal.type'
  | 'zdjecieCertyfikatu.mimeType'
  | 'zdjecieCertyfikatu.node_locale'
  | 'zdjecieCertyfikatu.parent.children'
  | 'zdjecieCertyfikatu.parent.children.children'
  | 'zdjecieCertyfikatu.parent.children.id'
  | 'zdjecieCertyfikatu.parent.id'
  | 'zdjecieCertyfikatu.parent.internal.content'
  | 'zdjecieCertyfikatu.parent.internal.contentDigest'
  | 'zdjecieCertyfikatu.parent.internal.contentFilePath'
  | 'zdjecieCertyfikatu.parent.internal.description'
  | 'zdjecieCertyfikatu.parent.internal.fieldOwners'
  | 'zdjecieCertyfikatu.parent.internal.ignoreType'
  | 'zdjecieCertyfikatu.parent.internal.mediaType'
  | 'zdjecieCertyfikatu.parent.internal.owner'
  | 'zdjecieCertyfikatu.parent.internal.type'
  | 'zdjecieCertyfikatu.parent.parent.children'
  | 'zdjecieCertyfikatu.parent.parent.id'
  | 'zdjecieCertyfikatu.placeholderUrl'
  | 'zdjecieCertyfikatu.publicUrl'
  | 'zdjecieCertyfikatu.resize.height'
  | 'zdjecieCertyfikatu.resize.src'
  | 'zdjecieCertyfikatu.resize.width'
  | 'zdjecieCertyfikatu.size'
  | 'zdjecieCertyfikatu.spaceId'
  | 'zdjecieCertyfikatu.sys.revision'
  | 'zdjecieCertyfikatu.sys.type'
  | 'zdjecieCertyfikatu.title'
  | 'zdjecieCertyfikatu.updatedAt'
  | 'zdjecieCertyfikatu.url'
  | 'zdjecieCertyfikatu.width';

type ContentfulCertyfikatFilterInput = {
  readonly certyfikat: InputMaybe<ContentfulAssetFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly event: InputMaybe<ContentfulEventFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly nazwaCertyfikatu: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulCertyfikatSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly zdjecieCertyfikatu: InputMaybe<ContentfulAssetFilterInput>;
};

type ContentfulCertyfikatFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulCertyfikatFilterInput>;
};

type ContentfulCertyfikatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCertyfikatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulCertyfikatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCertyfikat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCertyfikatGroupConnection_distinctArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatGroupConnection_groupArgs = {
  field: ContentfulCertyfikatFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCertyfikatGroupConnection_maxArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatGroupConnection_minArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};


type ContentfulCertyfikatGroupConnection_sumArgs = {
  field: ContentfulCertyfikatFieldsEnum;
};

type ContentfulCertyfikatSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCertyfikatFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulCertyfikatSys = {
  readonly contentType: Maybe<ContentfulCertyfikatSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulCertyfikatSysContentType = {
  readonly sys: Maybe<ContentfulCertyfikatSysContentTypeSys>;
};

type ContentfulCertyfikatSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulCertyfikatSysContentTypeSysFilterInput>;
};

type ContentfulCertyfikatSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulCertyfikatSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulCertyfikatSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulCertyfikatSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContenfulBlogPost = ContentfulEntry & ContentfulReference & Node & {
  readonly author: Maybe<Scalars['String']>;
  readonly blogPostContent: Maybe<ContentfulContenfulBlogPostBlogPostContent>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly keywords: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly postImage: Maybe<ContentfulAsset>;
  readonly publishedDate: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulContenfulBlogPostSys>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulContenfulBlogPost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulContenfulBlogPost_publishedDateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulContenfulBlogPost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulContenfulBlogPostBlogPostContent = {
  readonly raw: Maybe<Scalars['String']>;
  readonly references: Maybe<ReadonlyArray<Maybe<ContentfulAsset>>>;
};

type ContentfulContenfulBlogPostBlogPostContentFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
  readonly references: InputMaybe<ContentfulAssetFilterListInput>;
};

type ContentfulContenfulBlogPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContenfulBlogPostEdge>;
  readonly group: ReadonlyArray<ContentfulContenfulBlogPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContenfulBlogPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContenfulBlogPostConnection_distinctArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostConnection_groupArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContenfulBlogPostConnection_maxArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostConnection_minArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostConnection_sumArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};

type ContentfulContenfulBlogPostEdge = {
  readonly next: Maybe<ContentfulContenfulBlogPost>;
  readonly node: ContentfulContenfulBlogPost;
  readonly previous: Maybe<ContentfulContenfulBlogPost>;
};

type ContentfulContenfulBlogPostFieldsEnum =
  | 'author'
  | 'blogPostContent.raw'
  | 'blogPostContent.references'
  | 'blogPostContent.references.children'
  | 'blogPostContent.references.children.children'
  | 'blogPostContent.references.children.id'
  | 'blogPostContent.references.contentful_id'
  | 'blogPostContent.references.createdAt'
  | 'blogPostContent.references.description'
  | 'blogPostContent.references.file.contentType'
  | 'blogPostContent.references.file.fileName'
  | 'blogPostContent.references.file.url'
  | 'blogPostContent.references.filename'
  | 'blogPostContent.references.filesize'
  | 'blogPostContent.references.gatsbyImage'
  | 'blogPostContent.references.gatsbyImageData'
  | 'blogPostContent.references.height'
  | 'blogPostContent.references.id'
  | 'blogPostContent.references.internal.content'
  | 'blogPostContent.references.internal.contentDigest'
  | 'blogPostContent.references.internal.contentFilePath'
  | 'blogPostContent.references.internal.description'
  | 'blogPostContent.references.internal.fieldOwners'
  | 'blogPostContent.references.internal.ignoreType'
  | 'blogPostContent.references.internal.mediaType'
  | 'blogPostContent.references.internal.owner'
  | 'blogPostContent.references.internal.type'
  | 'blogPostContent.references.mimeType'
  | 'blogPostContent.references.node_locale'
  | 'blogPostContent.references.parent.children'
  | 'blogPostContent.references.parent.id'
  | 'blogPostContent.references.placeholderUrl'
  | 'blogPostContent.references.publicUrl'
  | 'blogPostContent.references.resize.height'
  | 'blogPostContent.references.resize.src'
  | 'blogPostContent.references.resize.width'
  | 'blogPostContent.references.size'
  | 'blogPostContent.references.spaceId'
  | 'blogPostContent.references.sys.revision'
  | 'blogPostContent.references.sys.type'
  | 'blogPostContent.references.title'
  | 'blogPostContent.references.updatedAt'
  | 'blogPostContent.references.url'
  | 'blogPostContent.references.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'createdAt'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'keywords'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'postImage.children'
  | 'postImage.children.children'
  | 'postImage.children.children.children'
  | 'postImage.children.children.id'
  | 'postImage.children.id'
  | 'postImage.children.internal.content'
  | 'postImage.children.internal.contentDigest'
  | 'postImage.children.internal.contentFilePath'
  | 'postImage.children.internal.description'
  | 'postImage.children.internal.fieldOwners'
  | 'postImage.children.internal.ignoreType'
  | 'postImage.children.internal.mediaType'
  | 'postImage.children.internal.owner'
  | 'postImage.children.internal.type'
  | 'postImage.children.parent.children'
  | 'postImage.children.parent.id'
  | 'postImage.contentful_id'
  | 'postImage.createdAt'
  | 'postImage.description'
  | 'postImage.file.contentType'
  | 'postImage.file.details.size'
  | 'postImage.file.fileName'
  | 'postImage.file.url'
  | 'postImage.filename'
  | 'postImage.filesize'
  | 'postImage.gatsbyImage'
  | 'postImage.gatsbyImageData'
  | 'postImage.height'
  | 'postImage.id'
  | 'postImage.internal.content'
  | 'postImage.internal.contentDigest'
  | 'postImage.internal.contentFilePath'
  | 'postImage.internal.description'
  | 'postImage.internal.fieldOwners'
  | 'postImage.internal.ignoreType'
  | 'postImage.internal.mediaType'
  | 'postImage.internal.owner'
  | 'postImage.internal.type'
  | 'postImage.mimeType'
  | 'postImage.node_locale'
  | 'postImage.parent.children'
  | 'postImage.parent.children.children'
  | 'postImage.parent.children.id'
  | 'postImage.parent.id'
  | 'postImage.parent.internal.content'
  | 'postImage.parent.internal.contentDigest'
  | 'postImage.parent.internal.contentFilePath'
  | 'postImage.parent.internal.description'
  | 'postImage.parent.internal.fieldOwners'
  | 'postImage.parent.internal.ignoreType'
  | 'postImage.parent.internal.mediaType'
  | 'postImage.parent.internal.owner'
  | 'postImage.parent.internal.type'
  | 'postImage.parent.parent.children'
  | 'postImage.parent.parent.id'
  | 'postImage.placeholderUrl'
  | 'postImage.publicUrl'
  | 'postImage.resize.height'
  | 'postImage.resize.src'
  | 'postImage.resize.width'
  | 'postImage.size'
  | 'postImage.spaceId'
  | 'postImage.sys.revision'
  | 'postImage.sys.type'
  | 'postImage.title'
  | 'postImage.updatedAt'
  | 'postImage.url'
  | 'postImage.width'
  | 'publishedDate'
  | 'slug'
  | 'spaceId'
  | 'sys.contentType.sys.id'
  | 'sys.contentType.sys.linkType'
  | 'sys.contentType.sys.type'
  | 'sys.revision'
  | 'sys.type'
  | 'tags'
  | 'title'
  | 'updatedAt';

type ContentfulContenfulBlogPostFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly blogPostContent: InputMaybe<ContentfulContenfulBlogPostBlogPostContentFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly keywords: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postImage: InputMaybe<ContentfulAssetFilterInput>;
  readonly publishedDate: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulContenfulBlogPostSysFilterInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulContenfulBlogPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContenfulBlogPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulContenfulBlogPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContenfulBlogPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContenfulBlogPostGroupConnection_distinctArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostGroupConnection_groupArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContenfulBlogPostGroupConnection_maxArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostGroupConnection_minArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};


type ContentfulContenfulBlogPostGroupConnection_sumArgs = {
  field: ContentfulContenfulBlogPostFieldsEnum;
};

type ContentfulContenfulBlogPostSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContenfulBlogPostFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulContenfulBlogPostSys = {
  readonly contentType: Maybe<ContentfulContenfulBlogPostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContenfulBlogPostSysContentType = {
  readonly sys: Maybe<ContentfulContenfulBlogPostSysContentTypeSys>;
};

type ContentfulContenfulBlogPostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulContenfulBlogPostSysContentTypeSysFilterInput>;
};

type ContentfulContenfulBlogPostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContenfulBlogPostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContenfulBlogPostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulContenfulBlogPostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContentType = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly displayField: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<ContentfulContentTypeSys>;
};

type ContentfulContentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeConnection_distinctArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeConnection_groupArgs = {
  field: ContentfulContentTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeConnection_maxArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeConnection_minArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeConnection_sumArgs = {
  field: ContentfulContentTypeFieldsEnum;
};

type ContentfulContentTypeEdge = {
  readonly next: Maybe<ContentfulContentType>;
  readonly node: ContentfulContentType;
  readonly previous: Maybe<ContentfulContentType>;
};

type ContentfulContentTypeFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'description'
  | 'displayField'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'sys.type';

type ContentfulContentTypeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly displayField: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};

type ContentfulContentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeGroupConnection_distinctArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeGroupConnection_groupArgs = {
  field: ContentfulContentTypeFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeGroupConnection_maxArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeGroupConnection_minArgs = {
  field: ContentfulContentTypeFieldsEnum;
};


type ContentfulContentTypeGroupConnection_sumArgs = {
  field: ContentfulContentTypeFieldsEnum;
};

type ContentfulContentTypeSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulContentTypeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContentTypeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulCourse = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulCourseConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCourseEdge>;
  readonly group: ReadonlyArray<ContentfulCourseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCourse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCourseConnection_distinctArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseConnection_groupArgs = {
  field: ContentfulCourseFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCourseConnection_maxArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseConnection_minArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseConnection_sumArgs = {
  field: ContentfulCourseFieldsEnum;
};

type ContentfulCourseEdge = {
  readonly next: Maybe<ContentfulCourse>;
  readonly node: ContentfulCourse;
  readonly previous: Maybe<ContentfulCourse>;
};

type ContentfulCourseFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulCourseFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulCourseGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulCourseEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulCourseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulCourse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulCourseGroupConnection_distinctArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseGroupConnection_groupArgs = {
  field: ContentfulCourseFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulCourseGroupConnection_maxArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseGroupConnection_minArgs = {
  field: ContentfulCourseFieldsEnum;
};


type ContentfulCourseGroupConnection_sumArgs = {
  field: ContentfulCourseFieldsEnum;
};

type ContentfulCourseSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCourseFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulEntry = {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryConnection_distinctArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryConnection_groupArgs = {
  field: ContentfulEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryConnection_maxArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryConnection_minArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryConnection_sumArgs = {
  field: ContentfulEntryFieldsEnum;
};

type ContentfulEntryEdge = {
  readonly next: Maybe<ContentfulEntry>;
  readonly node: ContentfulEntry;
  readonly previous: Maybe<ContentfulEntry>;
};

type ContentfulEntryFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryGroupConnection_distinctArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryGroupConnection_groupArgs = {
  field: ContentfulEntryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryGroupConnection_maxArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryGroupConnection_minArgs = {
  field: ContentfulEntryFieldsEnum;
};


type ContentfulEntryGroupConnection_sumArgs = {
  field: ContentfulEntryFieldsEnum;
};

type ContentfulEntrySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulEvent = ContentfulEntry & ContentfulReference & Node & {
  readonly certyfikaty: Maybe<ReadonlyArray<Maybe<ContentfulCertyfikat>>>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly eventDate: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly informacja: Maybe<ContentfulEventInformacja>;
  readonly internal: Internal;
  readonly kolorTla: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly patroniHonorowi: Maybe<ReadonlyArray<Maybe<ContentfulPatron>>>;
  readonly patroniMedialni: Maybe<ReadonlyArray<Maybe<ContentfulPatron>>>;
  readonly placeOfEvent: Maybe<ContentfulEventPlaceOfEvent>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulEventSys>;
  readonly tloPowitalne: Maybe<ContentfulAsset>;
  readonly tytul: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulEvent_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulEvent_eventDateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulEvent_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulEventConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEventEdge>;
  readonly group: ReadonlyArray<ContentfulEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEventConnection_distinctArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventConnection_groupArgs = {
  field: ContentfulEventFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEventConnection_maxArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventConnection_minArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventConnection_sumArgs = {
  field: ContentfulEventFieldsEnum;
};

type ContentfulEventEdge = {
  readonly next: Maybe<ContentfulEvent>;
  readonly node: ContentfulEvent;
  readonly previous: Maybe<ContentfulEvent>;
};

type ContentfulEventFieldsEnum =
  | 'certyfikaty'
  | 'certyfikaty.certyfikat.children'
  | 'certyfikaty.certyfikat.children.children'
  | 'certyfikaty.certyfikat.children.id'
  | 'certyfikaty.certyfikat.contentful_id'
  | 'certyfikaty.certyfikat.createdAt'
  | 'certyfikaty.certyfikat.description'
  | 'certyfikaty.certyfikat.file.contentType'
  | 'certyfikaty.certyfikat.file.fileName'
  | 'certyfikaty.certyfikat.file.url'
  | 'certyfikaty.certyfikat.filename'
  | 'certyfikaty.certyfikat.filesize'
  | 'certyfikaty.certyfikat.gatsbyImage'
  | 'certyfikaty.certyfikat.gatsbyImageData'
  | 'certyfikaty.certyfikat.height'
  | 'certyfikaty.certyfikat.id'
  | 'certyfikaty.certyfikat.internal.content'
  | 'certyfikaty.certyfikat.internal.contentDigest'
  | 'certyfikaty.certyfikat.internal.contentFilePath'
  | 'certyfikaty.certyfikat.internal.description'
  | 'certyfikaty.certyfikat.internal.fieldOwners'
  | 'certyfikaty.certyfikat.internal.ignoreType'
  | 'certyfikaty.certyfikat.internal.mediaType'
  | 'certyfikaty.certyfikat.internal.owner'
  | 'certyfikaty.certyfikat.internal.type'
  | 'certyfikaty.certyfikat.mimeType'
  | 'certyfikaty.certyfikat.node_locale'
  | 'certyfikaty.certyfikat.parent.children'
  | 'certyfikaty.certyfikat.parent.id'
  | 'certyfikaty.certyfikat.placeholderUrl'
  | 'certyfikaty.certyfikat.publicUrl'
  | 'certyfikaty.certyfikat.resize.height'
  | 'certyfikaty.certyfikat.resize.src'
  | 'certyfikaty.certyfikat.resize.width'
  | 'certyfikaty.certyfikat.size'
  | 'certyfikaty.certyfikat.spaceId'
  | 'certyfikaty.certyfikat.sys.revision'
  | 'certyfikaty.certyfikat.sys.type'
  | 'certyfikaty.certyfikat.title'
  | 'certyfikaty.certyfikat.updatedAt'
  | 'certyfikaty.certyfikat.url'
  | 'certyfikaty.certyfikat.width'
  | 'certyfikaty.children'
  | 'certyfikaty.children.children'
  | 'certyfikaty.children.children.children'
  | 'certyfikaty.children.children.id'
  | 'certyfikaty.children.id'
  | 'certyfikaty.children.internal.content'
  | 'certyfikaty.children.internal.contentDigest'
  | 'certyfikaty.children.internal.contentFilePath'
  | 'certyfikaty.children.internal.description'
  | 'certyfikaty.children.internal.fieldOwners'
  | 'certyfikaty.children.internal.ignoreType'
  | 'certyfikaty.children.internal.mediaType'
  | 'certyfikaty.children.internal.owner'
  | 'certyfikaty.children.internal.type'
  | 'certyfikaty.children.parent.children'
  | 'certyfikaty.children.parent.id'
  | 'certyfikaty.contentful_id'
  | 'certyfikaty.createdAt'
  | 'certyfikaty.event'
  | 'certyfikaty.event.certyfikaty'
  | 'certyfikaty.event.certyfikaty.children'
  | 'certyfikaty.event.certyfikaty.contentful_id'
  | 'certyfikaty.event.certyfikaty.createdAt'
  | 'certyfikaty.event.certyfikaty.event'
  | 'certyfikaty.event.certyfikaty.id'
  | 'certyfikaty.event.certyfikaty.nazwaCertyfikatu'
  | 'certyfikaty.event.certyfikaty.node_locale'
  | 'certyfikaty.event.certyfikaty.spaceId'
  | 'certyfikaty.event.certyfikaty.updatedAt'
  | 'certyfikaty.event.children'
  | 'certyfikaty.event.children.children'
  | 'certyfikaty.event.children.id'
  | 'certyfikaty.event.contentful_id'
  | 'certyfikaty.event.createdAt'
  | 'certyfikaty.event.eventDate'
  | 'certyfikaty.event.id'
  | 'certyfikaty.event.informacja.raw'
  | 'certyfikaty.event.internal.content'
  | 'certyfikaty.event.internal.contentDigest'
  | 'certyfikaty.event.internal.contentFilePath'
  | 'certyfikaty.event.internal.description'
  | 'certyfikaty.event.internal.fieldOwners'
  | 'certyfikaty.event.internal.ignoreType'
  | 'certyfikaty.event.internal.mediaType'
  | 'certyfikaty.event.internal.owner'
  | 'certyfikaty.event.internal.type'
  | 'certyfikaty.event.kolorTla'
  | 'certyfikaty.event.node_locale'
  | 'certyfikaty.event.parent.children'
  | 'certyfikaty.event.parent.id'
  | 'certyfikaty.event.patroniHonorowi'
  | 'certyfikaty.event.patroniHonorowi.children'
  | 'certyfikaty.event.patroniHonorowi.contentful_id'
  | 'certyfikaty.event.patroniHonorowi.createdAt'
  | 'certyfikaty.event.patroniHonorowi.event'
  | 'certyfikaty.event.patroniHonorowi.id'
  | 'certyfikaty.event.patroniHonorowi.linkDoPatrona'
  | 'certyfikaty.event.patroniHonorowi.nazwaPatrona'
  | 'certyfikaty.event.patroniHonorowi.node_locale'
  | 'certyfikaty.event.patroniHonorowi.spaceId'
  | 'certyfikaty.event.patroniHonorowi.updatedAt'
  | 'certyfikaty.event.patroniMedialni'
  | 'certyfikaty.event.patroniMedialni.children'
  | 'certyfikaty.event.patroniMedialni.contentful_id'
  | 'certyfikaty.event.patroniMedialni.createdAt'
  | 'certyfikaty.event.patroniMedialni.event'
  | 'certyfikaty.event.patroniMedialni.id'
  | 'certyfikaty.event.patroniMedialni.linkDoPatrona'
  | 'certyfikaty.event.patroniMedialni.nazwaPatrona'
  | 'certyfikaty.event.patroniMedialni.node_locale'
  | 'certyfikaty.event.patroniMedialni.spaceId'
  | 'certyfikaty.event.patroniMedialni.updatedAt'
  | 'certyfikaty.event.placeOfEvent.lat'
  | 'certyfikaty.event.placeOfEvent.lon'
  | 'certyfikaty.event.spaceId'
  | 'certyfikaty.event.sys.revision'
  | 'certyfikaty.event.sys.type'
  | 'certyfikaty.event.tloPowitalne.children'
  | 'certyfikaty.event.tloPowitalne.contentful_id'
  | 'certyfikaty.event.tloPowitalne.createdAt'
  | 'certyfikaty.event.tloPowitalne.description'
  | 'certyfikaty.event.tloPowitalne.filename'
  | 'certyfikaty.event.tloPowitalne.filesize'
  | 'certyfikaty.event.tloPowitalne.gatsbyImage'
  | 'certyfikaty.event.tloPowitalne.gatsbyImageData'
  | 'certyfikaty.event.tloPowitalne.height'
  | 'certyfikaty.event.tloPowitalne.id'
  | 'certyfikaty.event.tloPowitalne.mimeType'
  | 'certyfikaty.event.tloPowitalne.node_locale'
  | 'certyfikaty.event.tloPowitalne.placeholderUrl'
  | 'certyfikaty.event.tloPowitalne.publicUrl'
  | 'certyfikaty.event.tloPowitalne.size'
  | 'certyfikaty.event.tloPowitalne.spaceId'
  | 'certyfikaty.event.tloPowitalne.title'
  | 'certyfikaty.event.tloPowitalne.updatedAt'
  | 'certyfikaty.event.tloPowitalne.url'
  | 'certyfikaty.event.tloPowitalne.width'
  | 'certyfikaty.event.tytul'
  | 'certyfikaty.event.updatedAt'
  | 'certyfikaty.id'
  | 'certyfikaty.internal.content'
  | 'certyfikaty.internal.contentDigest'
  | 'certyfikaty.internal.contentFilePath'
  | 'certyfikaty.internal.description'
  | 'certyfikaty.internal.fieldOwners'
  | 'certyfikaty.internal.ignoreType'
  | 'certyfikaty.internal.mediaType'
  | 'certyfikaty.internal.owner'
  | 'certyfikaty.internal.type'
  | 'certyfikaty.nazwaCertyfikatu'
  | 'certyfikaty.node_locale'
  | 'certyfikaty.parent.children'
  | 'certyfikaty.parent.children.children'
  | 'certyfikaty.parent.children.id'
  | 'certyfikaty.parent.id'
  | 'certyfikaty.parent.internal.content'
  | 'certyfikaty.parent.internal.contentDigest'
  | 'certyfikaty.parent.internal.contentFilePath'
  | 'certyfikaty.parent.internal.description'
  | 'certyfikaty.parent.internal.fieldOwners'
  | 'certyfikaty.parent.internal.ignoreType'
  | 'certyfikaty.parent.internal.mediaType'
  | 'certyfikaty.parent.internal.owner'
  | 'certyfikaty.parent.internal.type'
  | 'certyfikaty.parent.parent.children'
  | 'certyfikaty.parent.parent.id'
  | 'certyfikaty.spaceId'
  | 'certyfikaty.sys.revision'
  | 'certyfikaty.sys.type'
  | 'certyfikaty.updatedAt'
  | 'certyfikaty.zdjecieCertyfikatu.children'
  | 'certyfikaty.zdjecieCertyfikatu.children.children'
  | 'certyfikaty.zdjecieCertyfikatu.children.id'
  | 'certyfikaty.zdjecieCertyfikatu.contentful_id'
  | 'certyfikaty.zdjecieCertyfikatu.createdAt'
  | 'certyfikaty.zdjecieCertyfikatu.description'
  | 'certyfikaty.zdjecieCertyfikatu.file.contentType'
  | 'certyfikaty.zdjecieCertyfikatu.file.fileName'
  | 'certyfikaty.zdjecieCertyfikatu.file.url'
  | 'certyfikaty.zdjecieCertyfikatu.filename'
  | 'certyfikaty.zdjecieCertyfikatu.filesize'
  | 'certyfikaty.zdjecieCertyfikatu.gatsbyImage'
  | 'certyfikaty.zdjecieCertyfikatu.gatsbyImageData'
  | 'certyfikaty.zdjecieCertyfikatu.height'
  | 'certyfikaty.zdjecieCertyfikatu.id'
  | 'certyfikaty.zdjecieCertyfikatu.internal.content'
  | 'certyfikaty.zdjecieCertyfikatu.internal.contentDigest'
  | 'certyfikaty.zdjecieCertyfikatu.internal.contentFilePath'
  | 'certyfikaty.zdjecieCertyfikatu.internal.description'
  | 'certyfikaty.zdjecieCertyfikatu.internal.fieldOwners'
  | 'certyfikaty.zdjecieCertyfikatu.internal.ignoreType'
  | 'certyfikaty.zdjecieCertyfikatu.internal.mediaType'
  | 'certyfikaty.zdjecieCertyfikatu.internal.owner'
  | 'certyfikaty.zdjecieCertyfikatu.internal.type'
  | 'certyfikaty.zdjecieCertyfikatu.mimeType'
  | 'certyfikaty.zdjecieCertyfikatu.node_locale'
  | 'certyfikaty.zdjecieCertyfikatu.parent.children'
  | 'certyfikaty.zdjecieCertyfikatu.parent.id'
  | 'certyfikaty.zdjecieCertyfikatu.placeholderUrl'
  | 'certyfikaty.zdjecieCertyfikatu.publicUrl'
  | 'certyfikaty.zdjecieCertyfikatu.resize.height'
  | 'certyfikaty.zdjecieCertyfikatu.resize.src'
  | 'certyfikaty.zdjecieCertyfikatu.resize.width'
  | 'certyfikaty.zdjecieCertyfikatu.size'
  | 'certyfikaty.zdjecieCertyfikatu.spaceId'
  | 'certyfikaty.zdjecieCertyfikatu.sys.revision'
  | 'certyfikaty.zdjecieCertyfikatu.sys.type'
  | 'certyfikaty.zdjecieCertyfikatu.title'
  | 'certyfikaty.zdjecieCertyfikatu.updatedAt'
  | 'certyfikaty.zdjecieCertyfikatu.url'
  | 'certyfikaty.zdjecieCertyfikatu.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'createdAt'
  | 'eventDate'
  | 'id'
  | 'informacja.raw'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'kolorTla'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'patroniHonorowi'
  | 'patroniHonorowi.children'
  | 'patroniHonorowi.children.children'
  | 'patroniHonorowi.children.children.children'
  | 'patroniHonorowi.children.children.id'
  | 'patroniHonorowi.children.id'
  | 'patroniHonorowi.children.internal.content'
  | 'patroniHonorowi.children.internal.contentDigest'
  | 'patroniHonorowi.children.internal.contentFilePath'
  | 'patroniHonorowi.children.internal.description'
  | 'patroniHonorowi.children.internal.fieldOwners'
  | 'patroniHonorowi.children.internal.ignoreType'
  | 'patroniHonorowi.children.internal.mediaType'
  | 'patroniHonorowi.children.internal.owner'
  | 'patroniHonorowi.children.internal.type'
  | 'patroniHonorowi.children.parent.children'
  | 'patroniHonorowi.children.parent.id'
  | 'patroniHonorowi.contentful_id'
  | 'patroniHonorowi.createdAt'
  | 'patroniHonorowi.event'
  | 'patroniHonorowi.event.certyfikaty'
  | 'patroniHonorowi.event.certyfikaty.children'
  | 'patroniHonorowi.event.certyfikaty.contentful_id'
  | 'patroniHonorowi.event.certyfikaty.createdAt'
  | 'patroniHonorowi.event.certyfikaty.event'
  | 'patroniHonorowi.event.certyfikaty.id'
  | 'patroniHonorowi.event.certyfikaty.nazwaCertyfikatu'
  | 'patroniHonorowi.event.certyfikaty.node_locale'
  | 'patroniHonorowi.event.certyfikaty.spaceId'
  | 'patroniHonorowi.event.certyfikaty.updatedAt'
  | 'patroniHonorowi.event.children'
  | 'patroniHonorowi.event.children.children'
  | 'patroniHonorowi.event.children.id'
  | 'patroniHonorowi.event.contentful_id'
  | 'patroniHonorowi.event.createdAt'
  | 'patroniHonorowi.event.eventDate'
  | 'patroniHonorowi.event.id'
  | 'patroniHonorowi.event.informacja.raw'
  | 'patroniHonorowi.event.internal.content'
  | 'patroniHonorowi.event.internal.contentDigest'
  | 'patroniHonorowi.event.internal.contentFilePath'
  | 'patroniHonorowi.event.internal.description'
  | 'patroniHonorowi.event.internal.fieldOwners'
  | 'patroniHonorowi.event.internal.ignoreType'
  | 'patroniHonorowi.event.internal.mediaType'
  | 'patroniHonorowi.event.internal.owner'
  | 'patroniHonorowi.event.internal.type'
  | 'patroniHonorowi.event.kolorTla'
  | 'patroniHonorowi.event.node_locale'
  | 'patroniHonorowi.event.parent.children'
  | 'patroniHonorowi.event.parent.id'
  | 'patroniHonorowi.event.patroniHonorowi'
  | 'patroniHonorowi.event.patroniHonorowi.children'
  | 'patroniHonorowi.event.patroniHonorowi.contentful_id'
  | 'patroniHonorowi.event.patroniHonorowi.createdAt'
  | 'patroniHonorowi.event.patroniHonorowi.event'
  | 'patroniHonorowi.event.patroniHonorowi.id'
  | 'patroniHonorowi.event.patroniHonorowi.linkDoPatrona'
  | 'patroniHonorowi.event.patroniHonorowi.nazwaPatrona'
  | 'patroniHonorowi.event.patroniHonorowi.node_locale'
  | 'patroniHonorowi.event.patroniHonorowi.spaceId'
  | 'patroniHonorowi.event.patroniHonorowi.updatedAt'
  | 'patroniHonorowi.event.patroniMedialni'
  | 'patroniHonorowi.event.patroniMedialni.children'
  | 'patroniHonorowi.event.patroniMedialni.contentful_id'
  | 'patroniHonorowi.event.patroniMedialni.createdAt'
  | 'patroniHonorowi.event.patroniMedialni.event'
  | 'patroniHonorowi.event.patroniMedialni.id'
  | 'patroniHonorowi.event.patroniMedialni.linkDoPatrona'
  | 'patroniHonorowi.event.patroniMedialni.nazwaPatrona'
  | 'patroniHonorowi.event.patroniMedialni.node_locale'
  | 'patroniHonorowi.event.patroniMedialni.spaceId'
  | 'patroniHonorowi.event.patroniMedialni.updatedAt'
  | 'patroniHonorowi.event.placeOfEvent.lat'
  | 'patroniHonorowi.event.placeOfEvent.lon'
  | 'patroniHonorowi.event.spaceId'
  | 'patroniHonorowi.event.sys.revision'
  | 'patroniHonorowi.event.sys.type'
  | 'patroniHonorowi.event.tloPowitalne.children'
  | 'patroniHonorowi.event.tloPowitalne.contentful_id'
  | 'patroniHonorowi.event.tloPowitalne.createdAt'
  | 'patroniHonorowi.event.tloPowitalne.description'
  | 'patroniHonorowi.event.tloPowitalne.filename'
  | 'patroniHonorowi.event.tloPowitalne.filesize'
  | 'patroniHonorowi.event.tloPowitalne.gatsbyImage'
  | 'patroniHonorowi.event.tloPowitalne.gatsbyImageData'
  | 'patroniHonorowi.event.tloPowitalne.height'
  | 'patroniHonorowi.event.tloPowitalne.id'
  | 'patroniHonorowi.event.tloPowitalne.mimeType'
  | 'patroniHonorowi.event.tloPowitalne.node_locale'
  | 'patroniHonorowi.event.tloPowitalne.placeholderUrl'
  | 'patroniHonorowi.event.tloPowitalne.publicUrl'
  | 'patroniHonorowi.event.tloPowitalne.size'
  | 'patroniHonorowi.event.tloPowitalne.spaceId'
  | 'patroniHonorowi.event.tloPowitalne.title'
  | 'patroniHonorowi.event.tloPowitalne.updatedAt'
  | 'patroniHonorowi.event.tloPowitalne.url'
  | 'patroniHonorowi.event.tloPowitalne.width'
  | 'patroniHonorowi.event.tytul'
  | 'patroniHonorowi.event.updatedAt'
  | 'patroniHonorowi.id'
  | 'patroniHonorowi.internal.content'
  | 'patroniHonorowi.internal.contentDigest'
  | 'patroniHonorowi.internal.contentFilePath'
  | 'patroniHonorowi.internal.description'
  | 'patroniHonorowi.internal.fieldOwners'
  | 'patroniHonorowi.internal.ignoreType'
  | 'patroniHonorowi.internal.mediaType'
  | 'patroniHonorowi.internal.owner'
  | 'patroniHonorowi.internal.type'
  | 'patroniHonorowi.linkDoPatrona'
  | 'patroniHonorowi.nazwaPatrona'
  | 'patroniHonorowi.node_locale'
  | 'patroniHonorowi.parent.children'
  | 'patroniHonorowi.parent.children.children'
  | 'patroniHonorowi.parent.children.id'
  | 'patroniHonorowi.parent.id'
  | 'patroniHonorowi.parent.internal.content'
  | 'patroniHonorowi.parent.internal.contentDigest'
  | 'patroniHonorowi.parent.internal.contentFilePath'
  | 'patroniHonorowi.parent.internal.description'
  | 'patroniHonorowi.parent.internal.fieldOwners'
  | 'patroniHonorowi.parent.internal.ignoreType'
  | 'patroniHonorowi.parent.internal.mediaType'
  | 'patroniHonorowi.parent.internal.owner'
  | 'patroniHonorowi.parent.internal.type'
  | 'patroniHonorowi.parent.parent.children'
  | 'patroniHonorowi.parent.parent.id'
  | 'patroniHonorowi.spaceId'
  | 'patroniHonorowi.sys.revision'
  | 'patroniHonorowi.sys.type'
  | 'patroniHonorowi.updatedAt'
  | 'patroniHonorowi.zdjeciePatrona.children'
  | 'patroniHonorowi.zdjeciePatrona.children.children'
  | 'patroniHonorowi.zdjeciePatrona.children.id'
  | 'patroniHonorowi.zdjeciePatrona.contentful_id'
  | 'patroniHonorowi.zdjeciePatrona.createdAt'
  | 'patroniHonorowi.zdjeciePatrona.description'
  | 'patroniHonorowi.zdjeciePatrona.file.contentType'
  | 'patroniHonorowi.zdjeciePatrona.file.fileName'
  | 'patroniHonorowi.zdjeciePatrona.file.url'
  | 'patroniHonorowi.zdjeciePatrona.filename'
  | 'patroniHonorowi.zdjeciePatrona.filesize'
  | 'patroniHonorowi.zdjeciePatrona.gatsbyImage'
  | 'patroniHonorowi.zdjeciePatrona.gatsbyImageData'
  | 'patroniHonorowi.zdjeciePatrona.height'
  | 'patroniHonorowi.zdjeciePatrona.id'
  | 'patroniHonorowi.zdjeciePatrona.internal.content'
  | 'patroniHonorowi.zdjeciePatrona.internal.contentDigest'
  | 'patroniHonorowi.zdjeciePatrona.internal.contentFilePath'
  | 'patroniHonorowi.zdjeciePatrona.internal.description'
  | 'patroniHonorowi.zdjeciePatrona.internal.fieldOwners'
  | 'patroniHonorowi.zdjeciePatrona.internal.ignoreType'
  | 'patroniHonorowi.zdjeciePatrona.internal.mediaType'
  | 'patroniHonorowi.zdjeciePatrona.internal.owner'
  | 'patroniHonorowi.zdjeciePatrona.internal.type'
  | 'patroniHonorowi.zdjeciePatrona.mimeType'
  | 'patroniHonorowi.zdjeciePatrona.node_locale'
  | 'patroniHonorowi.zdjeciePatrona.parent.children'
  | 'patroniHonorowi.zdjeciePatrona.parent.id'
  | 'patroniHonorowi.zdjeciePatrona.placeholderUrl'
  | 'patroniHonorowi.zdjeciePatrona.publicUrl'
  | 'patroniHonorowi.zdjeciePatrona.resize.height'
  | 'patroniHonorowi.zdjeciePatrona.resize.src'
  | 'patroniHonorowi.zdjeciePatrona.resize.width'
  | 'patroniHonorowi.zdjeciePatrona.size'
  | 'patroniHonorowi.zdjeciePatrona.spaceId'
  | 'patroniHonorowi.zdjeciePatrona.sys.revision'
  | 'patroniHonorowi.zdjeciePatrona.sys.type'
  | 'patroniHonorowi.zdjeciePatrona.title'
  | 'patroniHonorowi.zdjeciePatrona.updatedAt'
  | 'patroniHonorowi.zdjeciePatrona.url'
  | 'patroniHonorowi.zdjeciePatrona.width'
  | 'patroniMedialni'
  | 'patroniMedialni.children'
  | 'patroniMedialni.children.children'
  | 'patroniMedialni.children.children.children'
  | 'patroniMedialni.children.children.id'
  | 'patroniMedialni.children.id'
  | 'patroniMedialni.children.internal.content'
  | 'patroniMedialni.children.internal.contentDigest'
  | 'patroniMedialni.children.internal.contentFilePath'
  | 'patroniMedialni.children.internal.description'
  | 'patroniMedialni.children.internal.fieldOwners'
  | 'patroniMedialni.children.internal.ignoreType'
  | 'patroniMedialni.children.internal.mediaType'
  | 'patroniMedialni.children.internal.owner'
  | 'patroniMedialni.children.internal.type'
  | 'patroniMedialni.children.parent.children'
  | 'patroniMedialni.children.parent.id'
  | 'patroniMedialni.contentful_id'
  | 'patroniMedialni.createdAt'
  | 'patroniMedialni.event'
  | 'patroniMedialni.event.certyfikaty'
  | 'patroniMedialni.event.certyfikaty.children'
  | 'patroniMedialni.event.certyfikaty.contentful_id'
  | 'patroniMedialni.event.certyfikaty.createdAt'
  | 'patroniMedialni.event.certyfikaty.event'
  | 'patroniMedialni.event.certyfikaty.id'
  | 'patroniMedialni.event.certyfikaty.nazwaCertyfikatu'
  | 'patroniMedialni.event.certyfikaty.node_locale'
  | 'patroniMedialni.event.certyfikaty.spaceId'
  | 'patroniMedialni.event.certyfikaty.updatedAt'
  | 'patroniMedialni.event.children'
  | 'patroniMedialni.event.children.children'
  | 'patroniMedialni.event.children.id'
  | 'patroniMedialni.event.contentful_id'
  | 'patroniMedialni.event.createdAt'
  | 'patroniMedialni.event.eventDate'
  | 'patroniMedialni.event.id'
  | 'patroniMedialni.event.informacja.raw'
  | 'patroniMedialni.event.internal.content'
  | 'patroniMedialni.event.internal.contentDigest'
  | 'patroniMedialni.event.internal.contentFilePath'
  | 'patroniMedialni.event.internal.description'
  | 'patroniMedialni.event.internal.fieldOwners'
  | 'patroniMedialni.event.internal.ignoreType'
  | 'patroniMedialni.event.internal.mediaType'
  | 'patroniMedialni.event.internal.owner'
  | 'patroniMedialni.event.internal.type'
  | 'patroniMedialni.event.kolorTla'
  | 'patroniMedialni.event.node_locale'
  | 'patroniMedialni.event.parent.children'
  | 'patroniMedialni.event.parent.id'
  | 'patroniMedialni.event.patroniHonorowi'
  | 'patroniMedialni.event.patroniHonorowi.children'
  | 'patroniMedialni.event.patroniHonorowi.contentful_id'
  | 'patroniMedialni.event.patroniHonorowi.createdAt'
  | 'patroniMedialni.event.patroniHonorowi.event'
  | 'patroniMedialni.event.patroniHonorowi.id'
  | 'patroniMedialni.event.patroniHonorowi.linkDoPatrona'
  | 'patroniMedialni.event.patroniHonorowi.nazwaPatrona'
  | 'patroniMedialni.event.patroniHonorowi.node_locale'
  | 'patroniMedialni.event.patroniHonorowi.spaceId'
  | 'patroniMedialni.event.patroniHonorowi.updatedAt'
  | 'patroniMedialni.event.patroniMedialni'
  | 'patroniMedialni.event.patroniMedialni.children'
  | 'patroniMedialni.event.patroniMedialni.contentful_id'
  | 'patroniMedialni.event.patroniMedialni.createdAt'
  | 'patroniMedialni.event.patroniMedialni.event'
  | 'patroniMedialni.event.patroniMedialni.id'
  | 'patroniMedialni.event.patroniMedialni.linkDoPatrona'
  | 'patroniMedialni.event.patroniMedialni.nazwaPatrona'
  | 'patroniMedialni.event.patroniMedialni.node_locale'
  | 'patroniMedialni.event.patroniMedialni.spaceId'
  | 'patroniMedialni.event.patroniMedialni.updatedAt'
  | 'patroniMedialni.event.placeOfEvent.lat'
  | 'patroniMedialni.event.placeOfEvent.lon'
  | 'patroniMedialni.event.spaceId'
  | 'patroniMedialni.event.sys.revision'
  | 'patroniMedialni.event.sys.type'
  | 'patroniMedialni.event.tloPowitalne.children'
  | 'patroniMedialni.event.tloPowitalne.contentful_id'
  | 'patroniMedialni.event.tloPowitalne.createdAt'
  | 'patroniMedialni.event.tloPowitalne.description'
  | 'patroniMedialni.event.tloPowitalne.filename'
  | 'patroniMedialni.event.tloPowitalne.filesize'
  | 'patroniMedialni.event.tloPowitalne.gatsbyImage'
  | 'patroniMedialni.event.tloPowitalne.gatsbyImageData'
  | 'patroniMedialni.event.tloPowitalne.height'
  | 'patroniMedialni.event.tloPowitalne.id'
  | 'patroniMedialni.event.tloPowitalne.mimeType'
  | 'patroniMedialni.event.tloPowitalne.node_locale'
  | 'patroniMedialni.event.tloPowitalne.placeholderUrl'
  | 'patroniMedialni.event.tloPowitalne.publicUrl'
  | 'patroniMedialni.event.tloPowitalne.size'
  | 'patroniMedialni.event.tloPowitalne.spaceId'
  | 'patroniMedialni.event.tloPowitalne.title'
  | 'patroniMedialni.event.tloPowitalne.updatedAt'
  | 'patroniMedialni.event.tloPowitalne.url'
  | 'patroniMedialni.event.tloPowitalne.width'
  | 'patroniMedialni.event.tytul'
  | 'patroniMedialni.event.updatedAt'
  | 'patroniMedialni.id'
  | 'patroniMedialni.internal.content'
  | 'patroniMedialni.internal.contentDigest'
  | 'patroniMedialni.internal.contentFilePath'
  | 'patroniMedialni.internal.description'
  | 'patroniMedialni.internal.fieldOwners'
  | 'patroniMedialni.internal.ignoreType'
  | 'patroniMedialni.internal.mediaType'
  | 'patroniMedialni.internal.owner'
  | 'patroniMedialni.internal.type'
  | 'patroniMedialni.linkDoPatrona'
  | 'patroniMedialni.nazwaPatrona'
  | 'patroniMedialni.node_locale'
  | 'patroniMedialni.parent.children'
  | 'patroniMedialni.parent.children.children'
  | 'patroniMedialni.parent.children.id'
  | 'patroniMedialni.parent.id'
  | 'patroniMedialni.parent.internal.content'
  | 'patroniMedialni.parent.internal.contentDigest'
  | 'patroniMedialni.parent.internal.contentFilePath'
  | 'patroniMedialni.parent.internal.description'
  | 'patroniMedialni.parent.internal.fieldOwners'
  | 'patroniMedialni.parent.internal.ignoreType'
  | 'patroniMedialni.parent.internal.mediaType'
  | 'patroniMedialni.parent.internal.owner'
  | 'patroniMedialni.parent.internal.type'
  | 'patroniMedialni.parent.parent.children'
  | 'patroniMedialni.parent.parent.id'
  | 'patroniMedialni.spaceId'
  | 'patroniMedialni.sys.revision'
  | 'patroniMedialni.sys.type'
  | 'patroniMedialni.updatedAt'
  | 'patroniMedialni.zdjeciePatrona.children'
  | 'patroniMedialni.zdjeciePatrona.children.children'
  | 'patroniMedialni.zdjeciePatrona.children.id'
  | 'patroniMedialni.zdjeciePatrona.contentful_id'
  | 'patroniMedialni.zdjeciePatrona.createdAt'
  | 'patroniMedialni.zdjeciePatrona.description'
  | 'patroniMedialni.zdjeciePatrona.file.contentType'
  | 'patroniMedialni.zdjeciePatrona.file.fileName'
  | 'patroniMedialni.zdjeciePatrona.file.url'
  | 'patroniMedialni.zdjeciePatrona.filename'
  | 'patroniMedialni.zdjeciePatrona.filesize'
  | 'patroniMedialni.zdjeciePatrona.gatsbyImage'
  | 'patroniMedialni.zdjeciePatrona.gatsbyImageData'
  | 'patroniMedialni.zdjeciePatrona.height'
  | 'patroniMedialni.zdjeciePatrona.id'
  | 'patroniMedialni.zdjeciePatrona.internal.content'
  | 'patroniMedialni.zdjeciePatrona.internal.contentDigest'
  | 'patroniMedialni.zdjeciePatrona.internal.contentFilePath'
  | 'patroniMedialni.zdjeciePatrona.internal.description'
  | 'patroniMedialni.zdjeciePatrona.internal.fieldOwners'
  | 'patroniMedialni.zdjeciePatrona.internal.ignoreType'
  | 'patroniMedialni.zdjeciePatrona.internal.mediaType'
  | 'patroniMedialni.zdjeciePatrona.internal.owner'
  | 'patroniMedialni.zdjeciePatrona.internal.type'
  | 'patroniMedialni.zdjeciePatrona.mimeType'
  | 'patroniMedialni.zdjeciePatrona.node_locale'
  | 'patroniMedialni.zdjeciePatrona.parent.children'
  | 'patroniMedialni.zdjeciePatrona.parent.id'
  | 'patroniMedialni.zdjeciePatrona.placeholderUrl'
  | 'patroniMedialni.zdjeciePatrona.publicUrl'
  | 'patroniMedialni.zdjeciePatrona.resize.height'
  | 'patroniMedialni.zdjeciePatrona.resize.src'
  | 'patroniMedialni.zdjeciePatrona.resize.width'
  | 'patroniMedialni.zdjeciePatrona.size'
  | 'patroniMedialni.zdjeciePatrona.spaceId'
  | 'patroniMedialni.zdjeciePatrona.sys.revision'
  | 'patroniMedialni.zdjeciePatrona.sys.type'
  | 'patroniMedialni.zdjeciePatrona.title'
  | 'patroniMedialni.zdjeciePatrona.updatedAt'
  | 'patroniMedialni.zdjeciePatrona.url'
  | 'patroniMedialni.zdjeciePatrona.width'
  | 'placeOfEvent.lat'
  | 'placeOfEvent.lon'
  | 'spaceId'
  | 'sys.contentType.sys.id'
  | 'sys.contentType.sys.linkType'
  | 'sys.contentType.sys.type'
  | 'sys.revision'
  | 'sys.type'
  | 'tloPowitalne.children'
  | 'tloPowitalne.children.children'
  | 'tloPowitalne.children.children.children'
  | 'tloPowitalne.children.children.id'
  | 'tloPowitalne.children.id'
  | 'tloPowitalne.children.internal.content'
  | 'tloPowitalne.children.internal.contentDigest'
  | 'tloPowitalne.children.internal.contentFilePath'
  | 'tloPowitalne.children.internal.description'
  | 'tloPowitalne.children.internal.fieldOwners'
  | 'tloPowitalne.children.internal.ignoreType'
  | 'tloPowitalne.children.internal.mediaType'
  | 'tloPowitalne.children.internal.owner'
  | 'tloPowitalne.children.internal.type'
  | 'tloPowitalne.children.parent.children'
  | 'tloPowitalne.children.parent.id'
  | 'tloPowitalne.contentful_id'
  | 'tloPowitalne.createdAt'
  | 'tloPowitalne.description'
  | 'tloPowitalne.file.contentType'
  | 'tloPowitalne.file.details.size'
  | 'tloPowitalne.file.fileName'
  | 'tloPowitalne.file.url'
  | 'tloPowitalne.filename'
  | 'tloPowitalne.filesize'
  | 'tloPowitalne.gatsbyImage'
  | 'tloPowitalne.gatsbyImageData'
  | 'tloPowitalne.height'
  | 'tloPowitalne.id'
  | 'tloPowitalne.internal.content'
  | 'tloPowitalne.internal.contentDigest'
  | 'tloPowitalne.internal.contentFilePath'
  | 'tloPowitalne.internal.description'
  | 'tloPowitalne.internal.fieldOwners'
  | 'tloPowitalne.internal.ignoreType'
  | 'tloPowitalne.internal.mediaType'
  | 'tloPowitalne.internal.owner'
  | 'tloPowitalne.internal.type'
  | 'tloPowitalne.mimeType'
  | 'tloPowitalne.node_locale'
  | 'tloPowitalne.parent.children'
  | 'tloPowitalne.parent.children.children'
  | 'tloPowitalne.parent.children.id'
  | 'tloPowitalne.parent.id'
  | 'tloPowitalne.parent.internal.content'
  | 'tloPowitalne.parent.internal.contentDigest'
  | 'tloPowitalne.parent.internal.contentFilePath'
  | 'tloPowitalne.parent.internal.description'
  | 'tloPowitalne.parent.internal.fieldOwners'
  | 'tloPowitalne.parent.internal.ignoreType'
  | 'tloPowitalne.parent.internal.mediaType'
  | 'tloPowitalne.parent.internal.owner'
  | 'tloPowitalne.parent.internal.type'
  | 'tloPowitalne.parent.parent.children'
  | 'tloPowitalne.parent.parent.id'
  | 'tloPowitalne.placeholderUrl'
  | 'tloPowitalne.publicUrl'
  | 'tloPowitalne.resize.height'
  | 'tloPowitalne.resize.src'
  | 'tloPowitalne.resize.width'
  | 'tloPowitalne.size'
  | 'tloPowitalne.spaceId'
  | 'tloPowitalne.sys.revision'
  | 'tloPowitalne.sys.type'
  | 'tloPowitalne.title'
  | 'tloPowitalne.updatedAt'
  | 'tloPowitalne.url'
  | 'tloPowitalne.width'
  | 'tytul'
  | 'updatedAt';

type ContentfulEventFilterInput = {
  readonly certyfikaty: InputMaybe<ContentfulCertyfikatFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly eventDate: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly informacja: InputMaybe<ContentfulEventInformacjaFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kolorTla: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly patroniHonorowi: InputMaybe<ContentfulPatronFilterListInput>;
  readonly patroniMedialni: InputMaybe<ContentfulPatronFilterListInput>;
  readonly placeOfEvent: InputMaybe<ContentfulEventPlaceOfEventFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulEventSysFilterInput>;
  readonly tloPowitalne: InputMaybe<ContentfulAssetFilterInput>;
  readonly tytul: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulEventFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulEventFilterInput>;
};

type ContentfulEventGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEventEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEventGroupConnection_distinctArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventGroupConnection_groupArgs = {
  field: ContentfulEventFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEventGroupConnection_maxArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventGroupConnection_minArgs = {
  field: ContentfulEventFieldsEnum;
};


type ContentfulEventGroupConnection_sumArgs = {
  field: ContentfulEventFieldsEnum;
};

type ContentfulEventInformacja = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulEventInformacjaFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulEventPlaceOfEvent = {
  readonly lat: Maybe<Scalars['Float']>;
  readonly lon: Maybe<Scalars['Float']>;
};

type ContentfulEventPlaceOfEventFilterInput = {
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly lon: InputMaybe<FloatQueryOperatorInput>;
};

type ContentfulEventSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEventFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulEventSys = {
  readonly contentType: Maybe<ContentfulEventSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulEventSysContentType = {
  readonly sys: Maybe<ContentfulEventSysContentTypeSys>;
};

type ContentfulEventSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulEventSysContentTypeSysFilterInput>;
};

type ContentfulEventSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulEventSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulEventSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulEventSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulImageCropFocus =
  | 'bottom'
  | 'bottom_right'
  | 'bottom_left'
  | 'center'
  | 'face'
  | 'faces'
  | 'left'
  | 'right'
  | 'top'
  | 'top_left'
  | 'top_right';

type ContentfulLayout = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutConnection_distinctArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutConnection_groupArgs = {
  field: ContentfulLayoutFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutConnection_maxArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutConnection_minArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutConnection_sumArgs = {
  field: ContentfulLayoutFieldsEnum;
};

type ContentfulLayoutCopy = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutCopyConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutCopyEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutCopyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutCopy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutCopyConnection_distinctArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyConnection_groupArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutCopyConnection_maxArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyConnection_minArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyConnection_sumArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};

type ContentfulLayoutCopyEdge = {
  readonly next: Maybe<ContentfulLayoutCopy>;
  readonly node: ContentfulLayoutCopy;
  readonly previous: Maybe<ContentfulLayoutCopy>;
};

type ContentfulLayoutCopyFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLayoutCopyFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutCopyGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutCopyEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutCopyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutCopy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutCopyGroupConnection_distinctArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyGroupConnection_groupArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutCopyGroupConnection_maxArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyGroupConnection_minArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};


type ContentfulLayoutCopyGroupConnection_sumArgs = {
  field: ContentfulLayoutCopyFieldsEnum;
};

type ContentfulLayoutCopySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutCopyFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLayoutEdge = {
  readonly next: Maybe<ContentfulLayout>;
  readonly node: ContentfulLayout;
  readonly previous: Maybe<ContentfulLayout>;
};

type ContentfulLayoutFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLayoutFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutGroupConnection_distinctArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutGroupConnection_groupArgs = {
  field: ContentfulLayoutFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutGroupConnection_maxArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutGroupConnection_minArgs = {
  field: ContentfulLayoutFieldsEnum;
};


type ContentfulLayoutGroupConnection_sumArgs = {
  field: ContentfulLayoutFieldsEnum;
};

type ContentfulLayoutHeroImage = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutHeroImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHeroImageEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutHeroImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHeroImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHeroImageConnection_distinctArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageConnection_groupArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHeroImageConnection_maxArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageConnection_minArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageConnection_sumArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};

type ContentfulLayoutHeroImageEdge = {
  readonly next: Maybe<ContentfulLayoutHeroImage>;
  readonly node: ContentfulLayoutHeroImage;
  readonly previous: Maybe<ContentfulLayoutHeroImage>;
};

type ContentfulLayoutHeroImageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLayoutHeroImageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutHeroImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHeroImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutHeroImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHeroImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHeroImageGroupConnection_distinctArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageGroupConnection_groupArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHeroImageGroupConnection_maxArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageGroupConnection_minArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};


type ContentfulLayoutHeroImageGroupConnection_sumArgs = {
  field: ContentfulLayoutHeroImageFieldsEnum;
};

type ContentfulLayoutHeroImageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutHeroImageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLayoutHighlightedCourse = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutHighlightedCourseConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHighlightedCourseEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutHighlightedCourseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHighlightedCourse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHighlightedCourseConnection_distinctArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseConnection_groupArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHighlightedCourseConnection_maxArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseConnection_minArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseConnection_sumArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};

type ContentfulLayoutHighlightedCourseEdge = {
  readonly next: Maybe<ContentfulLayoutHighlightedCourse>;
  readonly node: ContentfulLayoutHighlightedCourse;
  readonly previous: Maybe<ContentfulLayoutHighlightedCourse>;
};

type ContentfulLayoutHighlightedCourseFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLayoutHighlightedCourseFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutHighlightedCourseGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHighlightedCourseEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutHighlightedCourseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHighlightedCourse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHighlightedCourseGroupConnection_distinctArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseGroupConnection_groupArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHighlightedCourseGroupConnection_maxArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseGroupConnection_minArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};


type ContentfulLayoutHighlightedCourseGroupConnection_sumArgs = {
  field: ContentfulLayoutHighlightedCourseFieldsEnum;
};

type ContentfulLayoutHighlightedCourseSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutHighlightedCourseFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLayoutSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLesson = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLessonCodeSnippets = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLessonCodeSnippetsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonCodeSnippetsEdge>;
  readonly group: ReadonlyArray<ContentfulLessonCodeSnippetsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonCodeSnippets>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonCodeSnippetsConnection_distinctArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsConnection_groupArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonCodeSnippetsConnection_maxArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsConnection_minArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsConnection_sumArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};

type ContentfulLessonCodeSnippetsEdge = {
  readonly next: Maybe<ContentfulLessonCodeSnippets>;
  readonly node: ContentfulLessonCodeSnippets;
  readonly previous: Maybe<ContentfulLessonCodeSnippets>;
};

type ContentfulLessonCodeSnippetsFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLessonCodeSnippetsFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLessonCodeSnippetsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonCodeSnippetsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLessonCodeSnippetsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonCodeSnippets>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonCodeSnippetsGroupConnection_distinctArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsGroupConnection_groupArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonCodeSnippetsGroupConnection_maxArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsGroupConnection_minArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};


type ContentfulLessonCodeSnippetsGroupConnection_sumArgs = {
  field: ContentfulLessonCodeSnippetsFieldsEnum;
};

type ContentfulLessonCodeSnippetsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLessonCodeSnippetsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLessonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonEdge>;
  readonly group: ReadonlyArray<ContentfulLessonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLesson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonConnection_distinctArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonConnection_groupArgs = {
  field: ContentfulLessonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonConnection_maxArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonConnection_minArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonConnection_sumArgs = {
  field: ContentfulLessonFieldsEnum;
};

type ContentfulLessonCopy = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLessonCopyConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonCopyEdge>;
  readonly group: ReadonlyArray<ContentfulLessonCopyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonCopy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonCopyConnection_distinctArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyConnection_groupArgs = {
  field: ContentfulLessonCopyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonCopyConnection_maxArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyConnection_minArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyConnection_sumArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};

type ContentfulLessonCopyEdge = {
  readonly next: Maybe<ContentfulLessonCopy>;
  readonly node: ContentfulLessonCopy;
  readonly previous: Maybe<ContentfulLessonCopy>;
};

type ContentfulLessonCopyFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLessonCopyFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLessonCopyGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonCopyEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLessonCopyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonCopy>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonCopyGroupConnection_distinctArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyGroupConnection_groupArgs = {
  field: ContentfulLessonCopyFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonCopyGroupConnection_maxArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyGroupConnection_minArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};


type ContentfulLessonCopyGroupConnection_sumArgs = {
  field: ContentfulLessonCopyFieldsEnum;
};

type ContentfulLessonCopySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLessonCopyFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLessonEdge = {
  readonly next: Maybe<ContentfulLesson>;
  readonly node: ContentfulLesson;
  readonly previous: Maybe<ContentfulLesson>;
};

type ContentfulLessonFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLessonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLessonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLessonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLesson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonGroupConnection_distinctArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonGroupConnection_groupArgs = {
  field: ContentfulLessonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonGroupConnection_maxArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonGroupConnection_minArgs = {
  field: ContentfulLessonFieldsEnum;
};


type ContentfulLessonGroupConnection_sumArgs = {
  field: ContentfulLessonFieldsEnum;
};

type ContentfulLessonImage = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLessonImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonImageEdge>;
  readonly group: ReadonlyArray<ContentfulLessonImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonImageConnection_distinctArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageConnection_groupArgs = {
  field: ContentfulLessonImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonImageConnection_maxArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageConnection_minArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageConnection_sumArgs = {
  field: ContentfulLessonImageFieldsEnum;
};

type ContentfulLessonImageEdge = {
  readonly next: Maybe<ContentfulLessonImage>;
  readonly node: ContentfulLessonImage;
  readonly previous: Maybe<ContentfulLessonImage>;
};

type ContentfulLessonImageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulLessonImageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLessonImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLessonImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLessonImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLessonImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLessonImageGroupConnection_distinctArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageGroupConnection_groupArgs = {
  field: ContentfulLessonImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLessonImageGroupConnection_maxArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageGroupConnection_minArgs = {
  field: ContentfulLessonImageFieldsEnum;
};


type ContentfulLessonImageGroupConnection_sumArgs = {
  field: ContentfulLessonImageFieldsEnum;
};

type ContentfulLessonImageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLessonImageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulLessonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLessonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulPatron = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly event: Maybe<ReadonlyArray<Maybe<ContentfulEvent>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly linkDoPatrona: Maybe<Scalars['String']>;
  readonly nazwaPatrona: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulPatronSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly zdjeciePatrona: Maybe<ContentfulAsset>;
};


type ContentfulPatron_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulPatron_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulPatronConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPatronEdge>;
  readonly group: ReadonlyArray<ContentfulPatronGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPatron>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPatronConnection_distinctArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronConnection_groupArgs = {
  field: ContentfulPatronFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPatronConnection_maxArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronConnection_minArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronConnection_sumArgs = {
  field: ContentfulPatronFieldsEnum;
};

type ContentfulPatronEdge = {
  readonly next: Maybe<ContentfulPatron>;
  readonly node: ContentfulPatron;
  readonly previous: Maybe<ContentfulPatron>;
};

type ContentfulPatronFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'createdAt'
  | 'event'
  | 'event.certyfikaty'
  | 'event.certyfikaty.certyfikat.children'
  | 'event.certyfikaty.certyfikat.contentful_id'
  | 'event.certyfikaty.certyfikat.createdAt'
  | 'event.certyfikaty.certyfikat.description'
  | 'event.certyfikaty.certyfikat.filename'
  | 'event.certyfikaty.certyfikat.filesize'
  | 'event.certyfikaty.certyfikat.gatsbyImage'
  | 'event.certyfikaty.certyfikat.gatsbyImageData'
  | 'event.certyfikaty.certyfikat.height'
  | 'event.certyfikaty.certyfikat.id'
  | 'event.certyfikaty.certyfikat.mimeType'
  | 'event.certyfikaty.certyfikat.node_locale'
  | 'event.certyfikaty.certyfikat.placeholderUrl'
  | 'event.certyfikaty.certyfikat.publicUrl'
  | 'event.certyfikaty.certyfikat.size'
  | 'event.certyfikaty.certyfikat.spaceId'
  | 'event.certyfikaty.certyfikat.title'
  | 'event.certyfikaty.certyfikat.updatedAt'
  | 'event.certyfikaty.certyfikat.url'
  | 'event.certyfikaty.certyfikat.width'
  | 'event.certyfikaty.children'
  | 'event.certyfikaty.children.children'
  | 'event.certyfikaty.children.id'
  | 'event.certyfikaty.contentful_id'
  | 'event.certyfikaty.createdAt'
  | 'event.certyfikaty.event'
  | 'event.certyfikaty.event.certyfikaty'
  | 'event.certyfikaty.event.children'
  | 'event.certyfikaty.event.contentful_id'
  | 'event.certyfikaty.event.createdAt'
  | 'event.certyfikaty.event.eventDate'
  | 'event.certyfikaty.event.id'
  | 'event.certyfikaty.event.kolorTla'
  | 'event.certyfikaty.event.node_locale'
  | 'event.certyfikaty.event.patroniHonorowi'
  | 'event.certyfikaty.event.patroniMedialni'
  | 'event.certyfikaty.event.spaceId'
  | 'event.certyfikaty.event.tytul'
  | 'event.certyfikaty.event.updatedAt'
  | 'event.certyfikaty.id'
  | 'event.certyfikaty.internal.content'
  | 'event.certyfikaty.internal.contentDigest'
  | 'event.certyfikaty.internal.contentFilePath'
  | 'event.certyfikaty.internal.description'
  | 'event.certyfikaty.internal.fieldOwners'
  | 'event.certyfikaty.internal.ignoreType'
  | 'event.certyfikaty.internal.mediaType'
  | 'event.certyfikaty.internal.owner'
  | 'event.certyfikaty.internal.type'
  | 'event.certyfikaty.nazwaCertyfikatu'
  | 'event.certyfikaty.node_locale'
  | 'event.certyfikaty.parent.children'
  | 'event.certyfikaty.parent.id'
  | 'event.certyfikaty.spaceId'
  | 'event.certyfikaty.sys.revision'
  | 'event.certyfikaty.sys.type'
  | 'event.certyfikaty.updatedAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.children'
  | 'event.certyfikaty.zdjecieCertyfikatu.contentful_id'
  | 'event.certyfikaty.zdjecieCertyfikatu.createdAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.description'
  | 'event.certyfikaty.zdjecieCertyfikatu.filename'
  | 'event.certyfikaty.zdjecieCertyfikatu.filesize'
  | 'event.certyfikaty.zdjecieCertyfikatu.gatsbyImage'
  | 'event.certyfikaty.zdjecieCertyfikatu.gatsbyImageData'
  | 'event.certyfikaty.zdjecieCertyfikatu.height'
  | 'event.certyfikaty.zdjecieCertyfikatu.id'
  | 'event.certyfikaty.zdjecieCertyfikatu.mimeType'
  | 'event.certyfikaty.zdjecieCertyfikatu.node_locale'
  | 'event.certyfikaty.zdjecieCertyfikatu.placeholderUrl'
  | 'event.certyfikaty.zdjecieCertyfikatu.publicUrl'
  | 'event.certyfikaty.zdjecieCertyfikatu.size'
  | 'event.certyfikaty.zdjecieCertyfikatu.spaceId'
  | 'event.certyfikaty.zdjecieCertyfikatu.title'
  | 'event.certyfikaty.zdjecieCertyfikatu.updatedAt'
  | 'event.certyfikaty.zdjecieCertyfikatu.url'
  | 'event.certyfikaty.zdjecieCertyfikatu.width'
  | 'event.children'
  | 'event.children.children'
  | 'event.children.children.children'
  | 'event.children.children.id'
  | 'event.children.id'
  | 'event.children.internal.content'
  | 'event.children.internal.contentDigest'
  | 'event.children.internal.contentFilePath'
  | 'event.children.internal.description'
  | 'event.children.internal.fieldOwners'
  | 'event.children.internal.ignoreType'
  | 'event.children.internal.mediaType'
  | 'event.children.internal.owner'
  | 'event.children.internal.type'
  | 'event.children.parent.children'
  | 'event.children.parent.id'
  | 'event.contentful_id'
  | 'event.createdAt'
  | 'event.eventDate'
  | 'event.id'
  | 'event.informacja.raw'
  | 'event.internal.content'
  | 'event.internal.contentDigest'
  | 'event.internal.contentFilePath'
  | 'event.internal.description'
  | 'event.internal.fieldOwners'
  | 'event.internal.ignoreType'
  | 'event.internal.mediaType'
  | 'event.internal.owner'
  | 'event.internal.type'
  | 'event.kolorTla'
  | 'event.node_locale'
  | 'event.parent.children'
  | 'event.parent.children.children'
  | 'event.parent.children.id'
  | 'event.parent.id'
  | 'event.parent.internal.content'
  | 'event.parent.internal.contentDigest'
  | 'event.parent.internal.contentFilePath'
  | 'event.parent.internal.description'
  | 'event.parent.internal.fieldOwners'
  | 'event.parent.internal.ignoreType'
  | 'event.parent.internal.mediaType'
  | 'event.parent.internal.owner'
  | 'event.parent.internal.type'
  | 'event.parent.parent.children'
  | 'event.parent.parent.id'
  | 'event.patroniHonorowi'
  | 'event.patroniHonorowi.children'
  | 'event.patroniHonorowi.children.children'
  | 'event.patroniHonorowi.children.id'
  | 'event.patroniHonorowi.contentful_id'
  | 'event.patroniHonorowi.createdAt'
  | 'event.patroniHonorowi.event'
  | 'event.patroniHonorowi.event.certyfikaty'
  | 'event.patroniHonorowi.event.children'
  | 'event.patroniHonorowi.event.contentful_id'
  | 'event.patroniHonorowi.event.createdAt'
  | 'event.patroniHonorowi.event.eventDate'
  | 'event.patroniHonorowi.event.id'
  | 'event.patroniHonorowi.event.kolorTla'
  | 'event.patroniHonorowi.event.node_locale'
  | 'event.patroniHonorowi.event.patroniHonorowi'
  | 'event.patroniHonorowi.event.patroniMedialni'
  | 'event.patroniHonorowi.event.spaceId'
  | 'event.patroniHonorowi.event.tytul'
  | 'event.patroniHonorowi.event.updatedAt'
  | 'event.patroniHonorowi.id'
  | 'event.patroniHonorowi.internal.content'
  | 'event.patroniHonorowi.internal.contentDigest'
  | 'event.patroniHonorowi.internal.contentFilePath'
  | 'event.patroniHonorowi.internal.description'
  | 'event.patroniHonorowi.internal.fieldOwners'
  | 'event.patroniHonorowi.internal.ignoreType'
  | 'event.patroniHonorowi.internal.mediaType'
  | 'event.patroniHonorowi.internal.owner'
  | 'event.patroniHonorowi.internal.type'
  | 'event.patroniHonorowi.linkDoPatrona'
  | 'event.patroniHonorowi.nazwaPatrona'
  | 'event.patroniHonorowi.node_locale'
  | 'event.patroniHonorowi.parent.children'
  | 'event.patroniHonorowi.parent.id'
  | 'event.patroniHonorowi.spaceId'
  | 'event.patroniHonorowi.sys.revision'
  | 'event.patroniHonorowi.sys.type'
  | 'event.patroniHonorowi.updatedAt'
  | 'event.patroniHonorowi.zdjeciePatrona.children'
  | 'event.patroniHonorowi.zdjeciePatrona.contentful_id'
  | 'event.patroniHonorowi.zdjeciePatrona.createdAt'
  | 'event.patroniHonorowi.zdjeciePatrona.description'
  | 'event.patroniHonorowi.zdjeciePatrona.filename'
  | 'event.patroniHonorowi.zdjeciePatrona.filesize'
  | 'event.patroniHonorowi.zdjeciePatrona.gatsbyImage'
  | 'event.patroniHonorowi.zdjeciePatrona.gatsbyImageData'
  | 'event.patroniHonorowi.zdjeciePatrona.height'
  | 'event.patroniHonorowi.zdjeciePatrona.id'
  | 'event.patroniHonorowi.zdjeciePatrona.mimeType'
  | 'event.patroniHonorowi.zdjeciePatrona.node_locale'
  | 'event.patroniHonorowi.zdjeciePatrona.placeholderUrl'
  | 'event.patroniHonorowi.zdjeciePatrona.publicUrl'
  | 'event.patroniHonorowi.zdjeciePatrona.size'
  | 'event.patroniHonorowi.zdjeciePatrona.spaceId'
  | 'event.patroniHonorowi.zdjeciePatrona.title'
  | 'event.patroniHonorowi.zdjeciePatrona.updatedAt'
  | 'event.patroniHonorowi.zdjeciePatrona.url'
  | 'event.patroniHonorowi.zdjeciePatrona.width'
  | 'event.patroniMedialni'
  | 'event.patroniMedialni.children'
  | 'event.patroniMedialni.children.children'
  | 'event.patroniMedialni.children.id'
  | 'event.patroniMedialni.contentful_id'
  | 'event.patroniMedialni.createdAt'
  | 'event.patroniMedialni.event'
  | 'event.patroniMedialni.event.certyfikaty'
  | 'event.patroniMedialni.event.children'
  | 'event.patroniMedialni.event.contentful_id'
  | 'event.patroniMedialni.event.createdAt'
  | 'event.patroniMedialni.event.eventDate'
  | 'event.patroniMedialni.event.id'
  | 'event.patroniMedialni.event.kolorTla'
  | 'event.patroniMedialni.event.node_locale'
  | 'event.patroniMedialni.event.patroniHonorowi'
  | 'event.patroniMedialni.event.patroniMedialni'
  | 'event.patroniMedialni.event.spaceId'
  | 'event.patroniMedialni.event.tytul'
  | 'event.patroniMedialni.event.updatedAt'
  | 'event.patroniMedialni.id'
  | 'event.patroniMedialni.internal.content'
  | 'event.patroniMedialni.internal.contentDigest'
  | 'event.patroniMedialni.internal.contentFilePath'
  | 'event.patroniMedialni.internal.description'
  | 'event.patroniMedialni.internal.fieldOwners'
  | 'event.patroniMedialni.internal.ignoreType'
  | 'event.patroniMedialni.internal.mediaType'
  | 'event.patroniMedialni.internal.owner'
  | 'event.patroniMedialni.internal.type'
  | 'event.patroniMedialni.linkDoPatrona'
  | 'event.patroniMedialni.nazwaPatrona'
  | 'event.patroniMedialni.node_locale'
  | 'event.patroniMedialni.parent.children'
  | 'event.patroniMedialni.parent.id'
  | 'event.patroniMedialni.spaceId'
  | 'event.patroniMedialni.sys.revision'
  | 'event.patroniMedialni.sys.type'
  | 'event.patroniMedialni.updatedAt'
  | 'event.patroniMedialni.zdjeciePatrona.children'
  | 'event.patroniMedialni.zdjeciePatrona.contentful_id'
  | 'event.patroniMedialni.zdjeciePatrona.createdAt'
  | 'event.patroniMedialni.zdjeciePatrona.description'
  | 'event.patroniMedialni.zdjeciePatrona.filename'
  | 'event.patroniMedialni.zdjeciePatrona.filesize'
  | 'event.patroniMedialni.zdjeciePatrona.gatsbyImage'
  | 'event.patroniMedialni.zdjeciePatrona.gatsbyImageData'
  | 'event.patroniMedialni.zdjeciePatrona.height'
  | 'event.patroniMedialni.zdjeciePatrona.id'
  | 'event.patroniMedialni.zdjeciePatrona.mimeType'
  | 'event.patroniMedialni.zdjeciePatrona.node_locale'
  | 'event.patroniMedialni.zdjeciePatrona.placeholderUrl'
  | 'event.patroniMedialni.zdjeciePatrona.publicUrl'
  | 'event.patroniMedialni.zdjeciePatrona.size'
  | 'event.patroniMedialni.zdjeciePatrona.spaceId'
  | 'event.patroniMedialni.zdjeciePatrona.title'
  | 'event.patroniMedialni.zdjeciePatrona.updatedAt'
  | 'event.patroniMedialni.zdjeciePatrona.url'
  | 'event.patroniMedialni.zdjeciePatrona.width'
  | 'event.placeOfEvent.lat'
  | 'event.placeOfEvent.lon'
  | 'event.spaceId'
  | 'event.sys.revision'
  | 'event.sys.type'
  | 'event.tloPowitalne.children'
  | 'event.tloPowitalne.children.children'
  | 'event.tloPowitalne.children.id'
  | 'event.tloPowitalne.contentful_id'
  | 'event.tloPowitalne.createdAt'
  | 'event.tloPowitalne.description'
  | 'event.tloPowitalne.file.contentType'
  | 'event.tloPowitalne.file.fileName'
  | 'event.tloPowitalne.file.url'
  | 'event.tloPowitalne.filename'
  | 'event.tloPowitalne.filesize'
  | 'event.tloPowitalne.gatsbyImage'
  | 'event.tloPowitalne.gatsbyImageData'
  | 'event.tloPowitalne.height'
  | 'event.tloPowitalne.id'
  | 'event.tloPowitalne.internal.content'
  | 'event.tloPowitalne.internal.contentDigest'
  | 'event.tloPowitalne.internal.contentFilePath'
  | 'event.tloPowitalne.internal.description'
  | 'event.tloPowitalne.internal.fieldOwners'
  | 'event.tloPowitalne.internal.ignoreType'
  | 'event.tloPowitalne.internal.mediaType'
  | 'event.tloPowitalne.internal.owner'
  | 'event.tloPowitalne.internal.type'
  | 'event.tloPowitalne.mimeType'
  | 'event.tloPowitalne.node_locale'
  | 'event.tloPowitalne.parent.children'
  | 'event.tloPowitalne.parent.id'
  | 'event.tloPowitalne.placeholderUrl'
  | 'event.tloPowitalne.publicUrl'
  | 'event.tloPowitalne.resize.height'
  | 'event.tloPowitalne.resize.src'
  | 'event.tloPowitalne.resize.width'
  | 'event.tloPowitalne.size'
  | 'event.tloPowitalne.spaceId'
  | 'event.tloPowitalne.sys.revision'
  | 'event.tloPowitalne.sys.type'
  | 'event.tloPowitalne.title'
  | 'event.tloPowitalne.updatedAt'
  | 'event.tloPowitalne.url'
  | 'event.tloPowitalne.width'
  | 'event.tytul'
  | 'event.updatedAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'linkDoPatrona'
  | 'nazwaPatrona'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'spaceId'
  | 'sys.contentType.sys.id'
  | 'sys.contentType.sys.linkType'
  | 'sys.contentType.sys.type'
  | 'sys.revision'
  | 'sys.type'
  | 'updatedAt'
  | 'zdjeciePatrona.children'
  | 'zdjeciePatrona.children.children'
  | 'zdjeciePatrona.children.children.children'
  | 'zdjeciePatrona.children.children.id'
  | 'zdjeciePatrona.children.id'
  | 'zdjeciePatrona.children.internal.content'
  | 'zdjeciePatrona.children.internal.contentDigest'
  | 'zdjeciePatrona.children.internal.contentFilePath'
  | 'zdjeciePatrona.children.internal.description'
  | 'zdjeciePatrona.children.internal.fieldOwners'
  | 'zdjeciePatrona.children.internal.ignoreType'
  | 'zdjeciePatrona.children.internal.mediaType'
  | 'zdjeciePatrona.children.internal.owner'
  | 'zdjeciePatrona.children.internal.type'
  | 'zdjeciePatrona.children.parent.children'
  | 'zdjeciePatrona.children.parent.id'
  | 'zdjeciePatrona.contentful_id'
  | 'zdjeciePatrona.createdAt'
  | 'zdjeciePatrona.description'
  | 'zdjeciePatrona.file.contentType'
  | 'zdjeciePatrona.file.details.size'
  | 'zdjeciePatrona.file.fileName'
  | 'zdjeciePatrona.file.url'
  | 'zdjeciePatrona.filename'
  | 'zdjeciePatrona.filesize'
  | 'zdjeciePatrona.gatsbyImage'
  | 'zdjeciePatrona.gatsbyImageData'
  | 'zdjeciePatrona.height'
  | 'zdjeciePatrona.id'
  | 'zdjeciePatrona.internal.content'
  | 'zdjeciePatrona.internal.contentDigest'
  | 'zdjeciePatrona.internal.contentFilePath'
  | 'zdjeciePatrona.internal.description'
  | 'zdjeciePatrona.internal.fieldOwners'
  | 'zdjeciePatrona.internal.ignoreType'
  | 'zdjeciePatrona.internal.mediaType'
  | 'zdjeciePatrona.internal.owner'
  | 'zdjeciePatrona.internal.type'
  | 'zdjeciePatrona.mimeType'
  | 'zdjeciePatrona.node_locale'
  | 'zdjeciePatrona.parent.children'
  | 'zdjeciePatrona.parent.children.children'
  | 'zdjeciePatrona.parent.children.id'
  | 'zdjeciePatrona.parent.id'
  | 'zdjeciePatrona.parent.internal.content'
  | 'zdjeciePatrona.parent.internal.contentDigest'
  | 'zdjeciePatrona.parent.internal.contentFilePath'
  | 'zdjeciePatrona.parent.internal.description'
  | 'zdjeciePatrona.parent.internal.fieldOwners'
  | 'zdjeciePatrona.parent.internal.ignoreType'
  | 'zdjeciePatrona.parent.internal.mediaType'
  | 'zdjeciePatrona.parent.internal.owner'
  | 'zdjeciePatrona.parent.internal.type'
  | 'zdjeciePatrona.parent.parent.children'
  | 'zdjeciePatrona.parent.parent.id'
  | 'zdjeciePatrona.placeholderUrl'
  | 'zdjeciePatrona.publicUrl'
  | 'zdjeciePatrona.resize.height'
  | 'zdjeciePatrona.resize.src'
  | 'zdjeciePatrona.resize.width'
  | 'zdjeciePatrona.size'
  | 'zdjeciePatrona.spaceId'
  | 'zdjeciePatrona.sys.revision'
  | 'zdjeciePatrona.sys.type'
  | 'zdjeciePatrona.title'
  | 'zdjeciePatrona.updatedAt'
  | 'zdjeciePatrona.url'
  | 'zdjeciePatrona.width';

type ContentfulPatronFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly event: InputMaybe<ContentfulEventFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly linkDoPatrona: InputMaybe<StringQueryOperatorInput>;
  readonly nazwaPatrona: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulPatronSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly zdjeciePatrona: InputMaybe<ContentfulAssetFilterInput>;
};

type ContentfulPatronFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulPatronFilterInput>;
};

type ContentfulPatronGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPatronEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulPatronGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPatron>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPatronGroupConnection_distinctArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronGroupConnection_groupArgs = {
  field: ContentfulPatronFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPatronGroupConnection_maxArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronGroupConnection_minArgs = {
  field: ContentfulPatronFieldsEnum;
};


type ContentfulPatronGroupConnection_sumArgs = {
  field: ContentfulPatronFieldsEnum;
};

type ContentfulPatronSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPatronFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulPatronSys = {
  readonly contentType: Maybe<ContentfulPatronSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPatronSysContentType = {
  readonly sys: Maybe<ContentfulPatronSysContentTypeSys>;
};

type ContentfulPatronSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulPatronSysContentTypeSysFilterInput>;
};

type ContentfulPatronSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPatronSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPatronSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulPatronSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPostList = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulPostListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPostListEdge>;
  readonly group: ReadonlyArray<ContentfulPostListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPostList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPostListConnection_distinctArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListConnection_groupArgs = {
  field: ContentfulPostListFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPostListConnection_maxArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListConnection_minArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListConnection_sumArgs = {
  field: ContentfulPostListFieldsEnum;
};

type ContentfulPostListEdge = {
  readonly next: Maybe<ContentfulPostList>;
  readonly node: ContentfulPostList;
  readonly previous: Maybe<ContentfulPostList>;
};

type ContentfulPostListFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulPostListFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulPostListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPostListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulPostListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPostList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPostListGroupConnection_distinctArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListGroupConnection_groupArgs = {
  field: ContentfulPostListFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPostListGroupConnection_maxArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListGroupConnection_minArgs = {
  field: ContentfulPostListFieldsEnum;
};


type ContentfulPostListGroupConnection_sumArgs = {
  field: ContentfulPostListFieldsEnum;
};

type ContentfulPostListSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPostListFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulProgramWydarzenia = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulProgramWydarzeniaConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulProgramWydarzeniaEdge>;
  readonly group: ReadonlyArray<ContentfulProgramWydarzeniaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulProgramWydarzenia>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulProgramWydarzeniaConnection_distinctArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaConnection_groupArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulProgramWydarzeniaConnection_maxArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaConnection_minArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaConnection_sumArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};

type ContentfulProgramWydarzeniaEdge = {
  readonly next: Maybe<ContentfulProgramWydarzenia>;
  readonly node: ContentfulProgramWydarzenia;
  readonly previous: Maybe<ContentfulProgramWydarzenia>;
};

type ContentfulProgramWydarzeniaFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'contentful_id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'node_locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type ContentfulProgramWydarzeniaFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulProgramWydarzeniaGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulProgramWydarzeniaEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulProgramWydarzeniaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulProgramWydarzenia>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulProgramWydarzeniaGroupConnection_distinctArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaGroupConnection_groupArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulProgramWydarzeniaGroupConnection_maxArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaGroupConnection_minArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};


type ContentfulProgramWydarzeniaGroupConnection_sumArgs = {
  field: ContentfulProgramWydarzeniaFieldsEnum;
};

type ContentfulProgramWydarzeniaSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulProgramWydarzeniaFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ContentfulReference = {
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageResizingBehavior =
  /** Crop a part of the original image to match the specified size. */
  | 'crop'
  /** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
  | 'fill'
  | ''
  /** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
  | 'pad'
  /** Scale the image regardless of the original aspect ratio. */
  | 'scale'
  /** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
  | 'thumb';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allContentfulAsset: ContentfulAssetConnection;
  readonly allContentfulBlogPost: ContentfulBlogPostConnection;
  readonly allContentfulCategory: ContentfulCategoryConnection;
  readonly allContentfulCertyfikat: ContentfulCertyfikatConnection;
  readonly allContentfulContenfulBlogPost: ContentfulContenfulBlogPostConnection;
  readonly allContentfulContentType: ContentfulContentTypeConnection;
  readonly allContentfulCourse: ContentfulCourseConnection;
  readonly allContentfulEntry: ContentfulEntryConnection;
  readonly allContentfulEvent: ContentfulEventConnection;
  readonly allContentfulLayout: ContentfulLayoutConnection;
  readonly allContentfulLayoutCopy: ContentfulLayoutCopyConnection;
  readonly allContentfulLayoutHeroImage: ContentfulLayoutHeroImageConnection;
  readonly allContentfulLayoutHighlightedCourse: ContentfulLayoutHighlightedCourseConnection;
  readonly allContentfulLesson: ContentfulLessonConnection;
  readonly allContentfulLessonCodeSnippets: ContentfulLessonCodeSnippetsConnection;
  readonly allContentfulLessonCopy: ContentfulLessonCopyConnection;
  readonly allContentfulLessonImage: ContentfulLessonImageConnection;
  readonly allContentfulPatron: ContentfulPatronConnection;
  readonly allContentfulPostList: ContentfulPostListConnection;
  readonly allContentfulProgramWydarzenia: ContentfulProgramWydarzeniaConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly contentfulAsset: Maybe<ContentfulAsset>;
  readonly contentfulBlogPost: Maybe<ContentfulBlogPost>;
  readonly contentfulCategory: Maybe<ContentfulCategory>;
  readonly contentfulCertyfikat: Maybe<ContentfulCertyfikat>;
  readonly contentfulContenfulBlogPost: Maybe<ContentfulContenfulBlogPost>;
  readonly contentfulContentType: Maybe<ContentfulContentType>;
  readonly contentfulCourse: Maybe<ContentfulCourse>;
  readonly contentfulEntry: Maybe<ContentfulEntry>;
  readonly contentfulEvent: Maybe<ContentfulEvent>;
  readonly contentfulLayout: Maybe<ContentfulLayout>;
  readonly contentfulLayoutCopy: Maybe<ContentfulLayoutCopy>;
  readonly contentfulLayoutHeroImage: Maybe<ContentfulLayoutHeroImage>;
  readonly contentfulLayoutHighlightedCourse: Maybe<ContentfulLayoutHighlightedCourse>;
  readonly contentfulLesson: Maybe<ContentfulLesson>;
  readonly contentfulLessonCodeSnippets: Maybe<ContentfulLessonCodeSnippets>;
  readonly contentfulLessonCopy: Maybe<ContentfulLessonCopy>;
  readonly contentfulLessonImage: Maybe<ContentfulLessonImage>;
  readonly contentfulPatron: Maybe<ContentfulPatron>;
  readonly contentfulPostList: Maybe<ContentfulPostList>;
  readonly contentfulProgramWydarzenia: Maybe<ContentfulProgramWydarzenia>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allContentfulAssetArgs = {
  filter: InputMaybe<ContentfulAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulAssetSortInput>;
};


type Query_allContentfulBlogPostArgs = {
  filter: InputMaybe<ContentfulBlogPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulBlogPostSortInput>;
};


type Query_allContentfulCategoryArgs = {
  filter: InputMaybe<ContentfulCategoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulCategorySortInput>;
};


type Query_allContentfulCertyfikatArgs = {
  filter: InputMaybe<ContentfulCertyfikatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulCertyfikatSortInput>;
};


type Query_allContentfulContenfulBlogPostArgs = {
  filter: InputMaybe<ContentfulContenfulBlogPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulContenfulBlogPostSortInput>;
};


type Query_allContentfulContentTypeArgs = {
  filter: InputMaybe<ContentfulContentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulContentTypeSortInput>;
};


type Query_allContentfulCourseArgs = {
  filter: InputMaybe<ContentfulCourseFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulCourseSortInput>;
};


type Query_allContentfulEntryArgs = {
  filter: InputMaybe<ContentfulEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulEntrySortInput>;
};


type Query_allContentfulEventArgs = {
  filter: InputMaybe<ContentfulEventFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulEventSortInput>;
};


type Query_allContentfulLayoutArgs = {
  filter: InputMaybe<ContentfulLayoutFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLayoutSortInput>;
};


type Query_allContentfulLayoutCopyArgs = {
  filter: InputMaybe<ContentfulLayoutCopyFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLayoutCopySortInput>;
};


type Query_allContentfulLayoutHeroImageArgs = {
  filter: InputMaybe<ContentfulLayoutHeroImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLayoutHeroImageSortInput>;
};


type Query_allContentfulLayoutHighlightedCourseArgs = {
  filter: InputMaybe<ContentfulLayoutHighlightedCourseFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLayoutHighlightedCourseSortInput>;
};


type Query_allContentfulLessonArgs = {
  filter: InputMaybe<ContentfulLessonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLessonSortInput>;
};


type Query_allContentfulLessonCodeSnippetsArgs = {
  filter: InputMaybe<ContentfulLessonCodeSnippetsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLessonCodeSnippetsSortInput>;
};


type Query_allContentfulLessonCopyArgs = {
  filter: InputMaybe<ContentfulLessonCopyFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLessonCopySortInput>;
};


type Query_allContentfulLessonImageArgs = {
  filter: InputMaybe<ContentfulLessonImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulLessonImageSortInput>;
};


type Query_allContentfulPatronArgs = {
  filter: InputMaybe<ContentfulPatronFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulPatronSortInput>;
};


type Query_allContentfulPostListArgs = {
  filter: InputMaybe<ContentfulPostListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulPostListSortInput>;
};


type Query_allContentfulProgramWydarzeniaArgs = {
  filter: InputMaybe<ContentfulProgramWydarzeniaFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentfulProgramWydarzeniaSortInput>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_contentfulAssetArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  file: InputMaybe<ContentfulAssetFileFilterInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAssetSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_contentfulBlogPostArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulCategoryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulCertyfikatArgs = {
  certyfikat: InputMaybe<ContentfulAssetFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  event: InputMaybe<ContentfulEventFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  nazwaCertyfikatu: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulCertyfikatSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  zdjecieCertyfikatu: InputMaybe<ContentfulAssetFilterInput>;
};


type Query_contentfulContenfulBlogPostArgs = {
  author: InputMaybe<StringQueryOperatorInput>;
  blogPostContent: InputMaybe<ContentfulContenfulBlogPostBlogPostContentFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  keywords: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postImage: InputMaybe<ContentfulAssetFilterInput>;
  publishedDate: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulContenfulBlogPostSysFilterInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulContentTypeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  displayField: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};


type Query_contentfulCourseArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulEventArgs = {
  certyfikaty: InputMaybe<ContentfulCertyfikatFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  eventDate: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  informacja: InputMaybe<ContentfulEventInformacjaFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kolorTla: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  patroniHonorowi: InputMaybe<ContentfulPatronFilterListInput>;
  patroniMedialni: InputMaybe<ContentfulPatronFilterListInput>;
  placeOfEvent: InputMaybe<ContentfulEventPlaceOfEventFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulEventSysFilterInput>;
  tloPowitalne: InputMaybe<ContentfulAssetFilterInput>;
  tytul: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulLayoutArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLayoutCopyArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLayoutHeroImageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLayoutHighlightedCourseArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLessonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLessonCodeSnippetsArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLessonCopyArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLessonImageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulPatronArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  event: InputMaybe<ContentfulEventFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  linkDoPatrona: InputMaybe<StringQueryOperatorInput>;
  nazwaPatrona: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulPatronSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  zdjeciePatrona: InputMaybe<ContentfulAssetFilterInput>;
};


type Query_contentfulPostListArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulProgramWydarzeniaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.generateOnBuild'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type MyQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MyQueryQuery = { readonly allContentfulEvent: { readonly edges: ReadonlyArray<{ readonly node: { readonly eventDate: string | null, readonly tytul: string | null, readonly kolorTla: string | null, readonly certyfikaty: ReadonlyArray<{ readonly nazwaCertyfikatu: string | null, readonly zdjecieCertyfikatu: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly certyfikat: { readonly file: { readonly url: string | null } | null } | null } | null> | null, readonly patroniHonorowi: ReadonlyArray<{ readonly linkDoPatrona: string | null, readonly nazwaPatrona: string | null, readonly zdjeciePatrona: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly patroniMedialni: ReadonlyArray<{ readonly nazwaPatrona: string | null, readonly linkDoPatrona: string | null, readonly zdjeciePatrona: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null } | null> | null, readonly placeOfEvent: { readonly lat: number | null, readonly lon: number | null } | null, readonly tloPowitalne: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly informacja: { readonly raw: string | null } | null } }> } };


}
